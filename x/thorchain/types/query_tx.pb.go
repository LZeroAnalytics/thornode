// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_tx.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTxStagesRequest struct {
	TxId   string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTxStagesRequest) Reset()         { *m = QueryTxStagesRequest{} }
func (m *QueryTxStagesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxStagesRequest) ProtoMessage()    {}
func (*QueryTxStagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{0}
}
func (m *QueryTxStagesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStagesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStagesRequest.Merge(m, src)
}
func (m *QueryTxStagesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStagesRequest proto.InternalMessageInfo

func (m *QueryTxStagesRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *QueryTxStagesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryTxStagesResponse struct {
	InboundObserved            InboundObservedStage             `protobuf:"bytes,1,opt,name=inbound_observed,json=inboundObserved,proto3" json:"inbound_observed"`
	InboundConfirmationCounted *InboundConfirmationCountedStage `protobuf:"bytes,2,opt,name=inbound_confirmation_counted,json=inboundConfirmationCounted,proto3" json:"inbound_confirmation_counted,omitempty"`
	InboundFinalised           *InboundFinalisedStage           `protobuf:"bytes,3,opt,name=inbound_finalised,json=inboundFinalised,proto3" json:"inbound_finalised,omitempty"`
	SwapStatus                 *SwapStatus                      `protobuf:"bytes,4,opt,name=swap_status,json=swapStatus,proto3" json:"swap_status,omitempty"`
	SwapFinalised              *SwapFinalisedStage              `protobuf:"bytes,5,opt,name=swap_finalised,json=swapFinalised,proto3" json:"swap_finalised,omitempty"`
	OutboundDelay              *OutboundDelayStage              `protobuf:"bytes,6,opt,name=outbound_delay,json=outboundDelay,proto3" json:"outbound_delay,omitempty"`
	OutboundSigned             *OutboundSignedStage             `protobuf:"bytes,7,opt,name=outbound_signed,json=outboundSigned,proto3" json:"outbound_signed,omitempty"`
}

func (m *QueryTxStagesResponse) Reset()         { *m = QueryTxStagesResponse{} }
func (m *QueryTxStagesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxStagesResponse) ProtoMessage()    {}
func (*QueryTxStagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{1}
}
func (m *QueryTxStagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStagesResponse.Merge(m, src)
}
func (m *QueryTxStagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStagesResponse proto.InternalMessageInfo

func (m *QueryTxStagesResponse) GetInboundObserved() InboundObservedStage {
	if m != nil {
		return m.InboundObserved
	}
	return InboundObservedStage{}
}

func (m *QueryTxStagesResponse) GetInboundConfirmationCounted() *InboundConfirmationCountedStage {
	if m != nil {
		return m.InboundConfirmationCounted
	}
	return nil
}

func (m *QueryTxStagesResponse) GetInboundFinalised() *InboundFinalisedStage {
	if m != nil {
		return m.InboundFinalised
	}
	return nil
}

func (m *QueryTxStagesResponse) GetSwapStatus() *SwapStatus {
	if m != nil {
		return m.SwapStatus
	}
	return nil
}

func (m *QueryTxStagesResponse) GetSwapFinalised() *SwapFinalisedStage {
	if m != nil {
		return m.SwapFinalised
	}
	return nil
}

func (m *QueryTxStagesResponse) GetOutboundDelay() *OutboundDelayStage {
	if m != nil {
		return m.OutboundDelay
	}
	return nil
}

func (m *QueryTxStagesResponse) GetOutboundSigned() *OutboundSignedStage {
	if m != nil {
		return m.OutboundSigned
	}
	return nil
}

type QueryTxStatusRequest struct {
	TxId   string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTxStatusRequest) Reset()         { *m = QueryTxStatusRequest{} }
func (m *QueryTxStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxStatusRequest) ProtoMessage()    {}
func (*QueryTxStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{2}
}
func (m *QueryTxStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStatusRequest.Merge(m, src)
}
func (m *QueryTxStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStatusRequest proto.InternalMessageInfo

func (m *QueryTxStatusRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *QueryTxStatusRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryTxStatusResponse struct {
	Tx            *common.Tx                               `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	PlannedOutTxs []*PlannedOutTx                          `protobuf:"bytes,2,rep,name=planned_out_txs,json=plannedOutTxs,proto3" json:"planned_out_txs,omitempty"`
	OutTxs        gitlab_com_thorchain_thornode_common.Txs `protobuf:"bytes,3,rep,name=out_txs,json=outTxs,proto3,castrepeated=gitlab.com/thorchain/thornode/common.Txs" json:"out_txs"`
	Stages        QueryTxStagesResponse                    `protobuf:"bytes,4,opt,name=stages,proto3" json:"stages"`
}

func (m *QueryTxStatusResponse) Reset()         { *m = QueryTxStatusResponse{} }
func (m *QueryTxStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxStatusResponse) ProtoMessage()    {}
func (*QueryTxStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{3}
}
func (m *QueryTxStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStatusResponse.Merge(m, src)
}
func (m *QueryTxStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStatusResponse proto.InternalMessageInfo

func (m *QueryTxStatusResponse) GetTx() *common.Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *QueryTxStatusResponse) GetPlannedOutTxs() []*PlannedOutTx {
	if m != nil {
		return m.PlannedOutTxs
	}
	return nil
}

func (m *QueryTxStatusResponse) GetOutTxs() gitlab_com_thorchain_thornode_common.Txs {
	if m != nil {
		return m.OutTxs
	}
	return nil
}

func (m *QueryTxStatusResponse) GetStages() QueryTxStagesResponse {
	if m != nil {
		return m.Stages
	}
	return QueryTxStagesResponse{}
}

type QueryTxRequest struct {
	TxId   string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTxRequest) Reset()         { *m = QueryTxRequest{} }
func (m *QueryTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxRequest) ProtoMessage()    {}
func (*QueryTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{4}
}
func (m *QueryTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxRequest.Merge(m, src)
}
func (m *QueryTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxRequest proto.InternalMessageInfo

func (m *QueryTxRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *QueryTxRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryTxResponse struct {
	ObservedTx QueryObservedTx `protobuf:"bytes,1,opt,name=observed_tx,json=observedTx,proto3" json:"observed_tx"`
	// the thorchain height at which the inbound reached consensus
	ConsensusHeight int64 `protobuf:"varint,2,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	// the thorchain height at which the outbound was finalised
	FinalisedHeight int64 `protobuf:"varint,3,opt,name=finalised_height,json=finalisedHeight,proto3" json:"finalised_height,omitempty"`
	// the thorchain height for which the outbound was scheduled
	OutboundHeight int64             `protobuf:"varint,4,opt,name=outbound_height,json=outboundHeight,proto3" json:"outbound_height,omitempty"`
	KeysignMetric  *TssKeysignMetric `protobuf:"bytes,5,opt,name=keysign_metric,json=keysignMetric,proto3" json:"keysign_metric"`
}

func (m *QueryTxResponse) Reset()         { *m = QueryTxResponse{} }
func (m *QueryTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxResponse) ProtoMessage()    {}
func (*QueryTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{5}
}
func (m *QueryTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxResponse.Merge(m, src)
}
func (m *QueryTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxResponse proto.InternalMessageInfo

func (m *QueryTxResponse) GetObservedTx() QueryObservedTx {
	if m != nil {
		return m.ObservedTx
	}
	return QueryObservedTx{}
}

func (m *QueryTxResponse) GetConsensusHeight() int64 {
	if m != nil {
		return m.ConsensusHeight
	}
	return 0
}

func (m *QueryTxResponse) GetFinalisedHeight() int64 {
	if m != nil {
		return m.FinalisedHeight
	}
	return 0
}

func (m *QueryTxResponse) GetOutboundHeight() int64 {
	if m != nil {
		return m.OutboundHeight
	}
	return 0
}

func (m *QueryTxResponse) GetKeysignMetric() *TssKeysignMetric {
	if m != nil {
		return m.KeysignMetric
	}
	return nil
}

// Same as ObservedTx, but changes block_height and finalise_height (openapi spec)
type QueryObservedTx struct {
	Tx                    common.Tx                                   `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	Status                string                                      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	OutHashes             []string                                    `protobuf:"bytes,3,rep,name=out_hashes,json=outHashes,proto3" json:"out_hashes,omitempty"`
	BlockHeight           int64                                       `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"external_observed_height,omitempty"`
	Signers               []string                                    `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
	ObservedPubKey        gitlab_com_thorchain_thornode_common.PubKey `protobuf:"bytes,6,opt,name=observed_pub_key,json=observedPubKey,proto3,casttype=gitlab.com/thorchain/thornode/common.PubKey" json:"observed_pub_key,omitempty"`
	KeysignMs             int64                                       `protobuf:"varint,7,opt,name=keysign_ms,json=keysignMs,proto3" json:"keysign_ms,omitempty"`
	FinaliseHeight        int64                                       `protobuf:"varint,8,opt,name=finalise_height,json=finaliseHeight,proto3" json:"external_confirmation_delay_height,omitempty"`
	Aggregator            string                                      `protobuf:"bytes,9,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AggregatorTarget      string                                      `protobuf:"bytes,10,opt,name=aggregator_target,json=aggregatorTarget,proto3" json:"aggregator_target,omitempty"`
	AggregatorTargetLimit *cosmossdk_io_math.Uint                     `protobuf:"bytes,11,opt,name=aggregator_target_limit,json=aggregatorTargetLimit,proto3,customtype=cosmossdk.io/math.Uint" json:"aggregator_target_limit,omitempty"`
}

func (m *QueryObservedTx) Reset()         { *m = QueryObservedTx{} }
func (m *QueryObservedTx) String() string { return proto.CompactTextString(m) }
func (*QueryObservedTx) ProtoMessage()    {}
func (*QueryObservedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{6}
}
func (m *QueryObservedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObservedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObservedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObservedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObservedTx.Merge(m, src)
}
func (m *QueryObservedTx) XXX_Size() int {
	return m.Size()
}
func (m *QueryObservedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObservedTx.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObservedTx proto.InternalMessageInfo

func (m *QueryObservedTx) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *QueryObservedTx) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryObservedTx) GetOutHashes() []string {
	if m != nil {
		return m.OutHashes
	}
	return nil
}

func (m *QueryObservedTx) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryObservedTx) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *QueryObservedTx) GetObservedPubKey() gitlab_com_thorchain_thornode_common.PubKey {
	if m != nil {
		return m.ObservedPubKey
	}
	return ""
}

func (m *QueryObservedTx) GetKeysignMs() int64 {
	if m != nil {
		return m.KeysignMs
	}
	return 0
}

func (m *QueryObservedTx) GetFinaliseHeight() int64 {
	if m != nil {
		return m.FinaliseHeight
	}
	return 0
}

func (m *QueryObservedTx) GetAggregator() string {
	if m != nil {
		return m.Aggregator
	}
	return ""
}

func (m *QueryObservedTx) GetAggregatorTarget() string {
	if m != nil {
		return m.AggregatorTarget
	}
	return ""
}

// Same as ObservedTxVoter, but changes height (openapi spec)
type QueryObservedTxVoter struct {
	TxID            gitlab_com_thorchain_thornode_common.TxID `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,casttype=gitlab.com/thorchain/thornode/common.TxID" json:"tx_id,omitempty"`
	Tx              QueryObservedTx                           `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
	Height          int64                                     `protobuf:"varint,3,opt,name=height,proto3" json:"consensus_height,omitempty"`
	Txs             []QueryObservedTx                         `protobuf:"bytes,4,rep,name=txs,proto3" json:"txs"`
	Actions         []TxOutItem                               `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions"`
	OutTxs          gitlab_com_thorchain_thornode_common.Txs  `protobuf:"bytes,6,rep,name=out_txs,json=outTxs,proto3,castrepeated=gitlab.com/thorchain/thornode/common.Txs" json:"out_txs"`
	FinalisedHeight int64                                     `protobuf:"varint,7,opt,name=finalised_height,json=finalisedHeight,proto3" json:"finalised_height,omitempty"`
	UpdatedVault    bool                                      `protobuf:"varint,8,opt,name=updated_vault,json=updatedVault,proto3" json:"updated_vault,omitempty"`
	Reverted        bool                                      `protobuf:"varint,9,opt,name=reverted,proto3" json:"reverted,omitempty"`
	OutboundHeight  int64                                     `protobuf:"varint,10,opt,name=outbound_height,json=outboundHeight,proto3" json:"outbound_height,omitempty"`
}

func (m *QueryObservedTxVoter) Reset()         { *m = QueryObservedTxVoter{} }
func (m *QueryObservedTxVoter) String() string { return proto.CompactTextString(m) }
func (*QueryObservedTxVoter) ProtoMessage()    {}
func (*QueryObservedTxVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{7}
}
func (m *QueryObservedTxVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObservedTxVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObservedTxVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObservedTxVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObservedTxVoter.Merge(m, src)
}
func (m *QueryObservedTxVoter) XXX_Size() int {
	return m.Size()
}
func (m *QueryObservedTxVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObservedTxVoter.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObservedTxVoter proto.InternalMessageInfo

func (m *QueryObservedTxVoter) GetTxID() gitlab_com_thorchain_thornode_common.TxID {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *QueryObservedTxVoter) GetTx() QueryObservedTx {
	if m != nil {
		return m.Tx
	}
	return QueryObservedTx{}
}

func (m *QueryObservedTxVoter) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryObservedTxVoter) GetTxs() []QueryObservedTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *QueryObservedTxVoter) GetActions() []TxOutItem {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *QueryObservedTxVoter) GetOutTxs() gitlab_com_thorchain_thornode_common.Txs {
	if m != nil {
		return m.OutTxs
	}
	return nil
}

func (m *QueryObservedTxVoter) GetFinalisedHeight() int64 {
	if m != nil {
		return m.FinalisedHeight
	}
	return 0
}

func (m *QueryObservedTxVoter) GetUpdatedVault() bool {
	if m != nil {
		return m.UpdatedVault
	}
	return false
}

func (m *QueryObservedTxVoter) GetReverted() bool {
	if m != nil {
		return m.Reverted
	}
	return false
}

func (m *QueryObservedTxVoter) GetOutboundHeight() int64 {
	if m != nil {
		return m.OutboundHeight
	}
	return 0
}

type QueryTxVotersRequest struct {
	TxId   string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTxVotersRequest) Reset()         { *m = QueryTxVotersRequest{} }
func (m *QueryTxVotersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxVotersRequest) ProtoMessage()    {}
func (*QueryTxVotersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{8}
}
func (m *QueryTxVotersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxVotersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxVotersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxVotersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxVotersRequest.Merge(m, src)
}
func (m *QueryTxVotersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxVotersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxVotersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxVotersRequest proto.InternalMessageInfo

func (m *QueryTxVotersRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *QueryTxVotersRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type PlannedOutTx struct {
	Chain     string       `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	ToAddress string       `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address"`
	Coin      *common.Coin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
	// returns true if the planned transaction has a refund memo
	Refund bool `protobuf:"varint,4,opt,name=refund,proto3" json:"refund"`
}

func (m *PlannedOutTx) Reset()         { *m = PlannedOutTx{} }
func (m *PlannedOutTx) String() string { return proto.CompactTextString(m) }
func (*PlannedOutTx) ProtoMessage()    {}
func (*PlannedOutTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{9}
}
func (m *PlannedOutTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannedOutTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannedOutTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannedOutTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannedOutTx.Merge(m, src)
}
func (m *PlannedOutTx) XXX_Size() int {
	return m.Size()
}
func (m *PlannedOutTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannedOutTx.DiscardUnknown(m)
}

var xxx_messageInfo_PlannedOutTx proto.InternalMessageInfo

func (m *PlannedOutTx) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *PlannedOutTx) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *PlannedOutTx) GetCoin() *common.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *PlannedOutTx) GetRefund() bool {
	if m != nil {
		return m.Refund
	}
	return false
}

type InboundObservedStage struct {
	// returns true if any nodes have observed the transaction (to be deprecated in favour of counts)
	Started bool `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`
	// number of signers for pre-confirmation-counting observations
	PreConfirmationCount int64 `protobuf:"varint,2,opt,name=pre_confirmation_count,json=preConfirmationCount,proto3" json:"pre_confirmation_count,omitempty"`
	// number of signers for final observations, after any confirmation counting complete
	FinalCount int64 `protobuf:"varint,3,opt,name=final_count,json=finalCount,proto3" json:"final_count"`
	// returns true if no transaction observation remains to be done
	Completed bool `protobuf:"varint,4,opt,name=completed,proto3" json:"completed"`
}

func (m *InboundObservedStage) Reset()         { *m = InboundObservedStage{} }
func (m *InboundObservedStage) String() string { return proto.CompactTextString(m) }
func (*InboundObservedStage) ProtoMessage()    {}
func (*InboundObservedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{10}
}
func (m *InboundObservedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundObservedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundObservedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundObservedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundObservedStage.Merge(m, src)
}
func (m *InboundObservedStage) XXX_Size() int {
	return m.Size()
}
func (m *InboundObservedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundObservedStage.DiscardUnknown(m)
}

var xxx_messageInfo_InboundObservedStage proto.InternalMessageInfo

func (m *InboundObservedStage) GetStarted() bool {
	if m != nil {
		return m.Started
	}
	return false
}

func (m *InboundObservedStage) GetPreConfirmationCount() int64 {
	if m != nil {
		return m.PreConfirmationCount
	}
	return 0
}

func (m *InboundObservedStage) GetFinalCount() int64 {
	if m != nil {
		return m.FinalCount
	}
	return 0
}

func (m *InboundObservedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type InboundConfirmationCountedStage struct {
	// the THORChain block height when confirmation counting began
	CountingStartHeight int64 `protobuf:"varint,1,opt,name=counting_start_height,json=countingStartHeight,proto3" json:"counting_start_height,omitempty"`
	// the external source chain for which confirmation counting takes place
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// the block height on the external source chain when the transaction was observed
	ExternalObservedHeight int64 `protobuf:"varint,3,opt,name=external_observed_height,json=externalObservedHeight,proto3" json:"external_observed_height,omitempty"`
	// the block height on the external source chain when confirmation counting will be complete
	ExternalConfirmationDelayHeight int64 `protobuf:"varint,4,opt,name=external_confirmation_delay_height,json=externalConfirmationDelayHeight,proto3" json:"external_confirmation_delay_height,omitempty"`
	// the estimated remaining seconds before confirmation counting completes
	RemainingConfirmationSeconds int64 `protobuf:"varint,5,opt,name=remaining_confirmation_seconds,json=remainingConfirmationSeconds,proto3" json:"remaining_confirmation_seconds"`
	// returns true if no transaction confirmation counting remains to be done
	Completed bool `protobuf:"varint,6,opt,name=completed,proto3" json:"completed"`
}

func (m *InboundConfirmationCountedStage) Reset()         { *m = InboundConfirmationCountedStage{} }
func (m *InboundConfirmationCountedStage) String() string { return proto.CompactTextString(m) }
func (*InboundConfirmationCountedStage) ProtoMessage()    {}
func (*InboundConfirmationCountedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{11}
}
func (m *InboundConfirmationCountedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundConfirmationCountedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundConfirmationCountedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundConfirmationCountedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundConfirmationCountedStage.Merge(m, src)
}
func (m *InboundConfirmationCountedStage) XXX_Size() int {
	return m.Size()
}
func (m *InboundConfirmationCountedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundConfirmationCountedStage.DiscardUnknown(m)
}

var xxx_messageInfo_InboundConfirmationCountedStage proto.InternalMessageInfo

func (m *InboundConfirmationCountedStage) GetCountingStartHeight() int64 {
	if m != nil {
		return m.CountingStartHeight
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *InboundConfirmationCountedStage) GetExternalObservedHeight() int64 {
	if m != nil {
		return m.ExternalObservedHeight
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetExternalConfirmationDelayHeight() int64 {
	if m != nil {
		return m.ExternalConfirmationDelayHeight
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetRemainingConfirmationSeconds() int64 {
	if m != nil {
		return m.RemainingConfirmationSeconds
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type InboundFinalisedStage struct {
	// returns true if the inbound transaction has been finalised (THORChain agreeing it exists)
	Completed bool `protobuf:"varint,1,opt,name=completed,proto3" json:"completed"`
}

func (m *InboundFinalisedStage) Reset()         { *m = InboundFinalisedStage{} }
func (m *InboundFinalisedStage) String() string { return proto.CompactTextString(m) }
func (*InboundFinalisedStage) ProtoMessage()    {}
func (*InboundFinalisedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{12}
}
func (m *InboundFinalisedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundFinalisedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundFinalisedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundFinalisedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundFinalisedStage.Merge(m, src)
}
func (m *InboundFinalisedStage) XXX_Size() int {
	return m.Size()
}
func (m *InboundFinalisedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundFinalisedStage.DiscardUnknown(m)
}

var xxx_messageInfo_InboundFinalisedStage proto.InternalMessageInfo

func (m *InboundFinalisedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type SwapStatus struct {
	// true when awaiting a swap
	Pending   bool             `protobuf:"varint,1,opt,name=pending,proto3" json:"pending"`
	Streaming *StreamingStatus `protobuf:"bytes,2,opt,name=streaming,proto3" json:"streaming,omitempty"`
}

func (m *SwapStatus) Reset()         { *m = SwapStatus{} }
func (m *SwapStatus) String() string { return proto.CompactTextString(m) }
func (*SwapStatus) ProtoMessage()    {}
func (*SwapStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{13}
}
func (m *SwapStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapStatus.Merge(m, src)
}
func (m *SwapStatus) XXX_Size() int {
	return m.Size()
}
func (m *SwapStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SwapStatus proto.InternalMessageInfo

func (m *SwapStatus) GetPending() bool {
	if m != nil {
		return m.Pending
	}
	return false
}

func (m *SwapStatus) GetStreaming() *StreamingStatus {
	if m != nil {
		return m.Streaming
	}
	return nil
}

type StreamingStatus struct {
	// how often each swap is made, in blocks
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval"`
	// the total number of swaps in a streaming swaps
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity"`
	// the amount of swap attempts so far
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
}

func (m *StreamingStatus) Reset()         { *m = StreamingStatus{} }
func (m *StreamingStatus) String() string { return proto.CompactTextString(m) }
func (*StreamingStatus) ProtoMessage()    {}
func (*StreamingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{14}
}
func (m *StreamingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamingStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingStatus.Merge(m, src)
}
func (m *StreamingStatus) XXX_Size() int {
	return m.Size()
}
func (m *StreamingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingStatus proto.InternalMessageInfo

func (m *StreamingStatus) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *StreamingStatus) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *StreamingStatus) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SwapFinalisedStage struct {
	// (to be deprecated in favor of swap_status) returns true if an inbound transaction's swap (successful or refunded) is no longer pending
	Completed bool `protobuf:"varint,1,opt,name=completed,proto3" json:"completed"`
}

func (m *SwapFinalisedStage) Reset()         { *m = SwapFinalisedStage{} }
func (m *SwapFinalisedStage) String() string { return proto.CompactTextString(m) }
func (*SwapFinalisedStage) ProtoMessage()    {}
func (*SwapFinalisedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{15}
}
func (m *SwapFinalisedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapFinalisedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapFinalisedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapFinalisedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapFinalisedStage.Merge(m, src)
}
func (m *SwapFinalisedStage) XXX_Size() int {
	return m.Size()
}
func (m *SwapFinalisedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapFinalisedStage.DiscardUnknown(m)
}

var xxx_messageInfo_SwapFinalisedStage proto.InternalMessageInfo

func (m *SwapFinalisedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type OutboundDelayStage struct {
	// the number of remaining THORChain blocks the outbound will be delayed
	RemainingDelayBlocks int64 `protobuf:"varint,1,opt,name=remaining_delay_blocks,json=remainingDelayBlocks,proto3" json:"remaining_delay_blocks,omitempty"`
	// the estimated remaining seconds of the outbound delay before it will be sent
	RemainingDelaySeconds int64 `protobuf:"varint,2,opt,name=remaining_delay_seconds,json=remainingDelaySeconds,proto3" json:"remaining_delay_seconds,omitempty"`
	// returns true if no transaction outbound delay remains
	Completed bool `protobuf:"varint,3,opt,name=completed,proto3" json:"completed"`
}

func (m *OutboundDelayStage) Reset()         { *m = OutboundDelayStage{} }
func (m *OutboundDelayStage) String() string { return proto.CompactTextString(m) }
func (*OutboundDelayStage) ProtoMessage()    {}
func (*OutboundDelayStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{16}
}
func (m *OutboundDelayStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundDelayStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundDelayStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundDelayStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundDelayStage.Merge(m, src)
}
func (m *OutboundDelayStage) XXX_Size() int {
	return m.Size()
}
func (m *OutboundDelayStage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundDelayStage.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundDelayStage proto.InternalMessageInfo

func (m *OutboundDelayStage) GetRemainingDelayBlocks() int64 {
	if m != nil {
		return m.RemainingDelayBlocks
	}
	return 0
}

func (m *OutboundDelayStage) GetRemainingDelaySeconds() int64 {
	if m != nil {
		return m.RemainingDelaySeconds
	}
	return 0
}

func (m *OutboundDelayStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type OutboundSignedStage struct {
	// THORChain height for which the external outbound is scheduled
	ScheduledOutboundHeight int64 `protobuf:"varint,1,opt,name=scheduled_outbound_height,json=scheduledOutboundHeight,proto3" json:"scheduled_outbound_height,omitempty"`
	// Types that are valid to be assigned to XBlocksSinceScheduled:
	//
	//	*OutboundSignedStage_BlocksSinceScheduled
	XBlocksSinceScheduled isOutboundSignedStage_XBlocksSinceScheduled `protobuf_oneof:"_blocks_since_scheduled"`
	// returns true if an external transaction has been signed and broadcast (and observed in its mempool)
	Completed bool `protobuf:"varint,3,opt,name=completed,proto3" json:"completed"`
}

func (m *OutboundSignedStage) Reset()         { *m = OutboundSignedStage{} }
func (m *OutboundSignedStage) String() string { return proto.CompactTextString(m) }
func (*OutboundSignedStage) ProtoMessage()    {}
func (*OutboundSignedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{17}
}
func (m *OutboundSignedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundSignedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundSignedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundSignedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundSignedStage.Merge(m, src)
}
func (m *OutboundSignedStage) XXX_Size() int {
	return m.Size()
}
func (m *OutboundSignedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundSignedStage.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundSignedStage proto.InternalMessageInfo

type isOutboundSignedStage_XBlocksSinceScheduled interface {
	isOutboundSignedStage_XBlocksSinceScheduled()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OutboundSignedStage_BlocksSinceScheduled struct {
	BlocksSinceScheduled int64 `protobuf:"varint,2,opt,name=blocks_since_scheduled,json=blocksSinceScheduled,proto3,oneof" json:"blocks_since_scheduled,omitempty"`
}

func (*OutboundSignedStage_BlocksSinceScheduled) isOutboundSignedStage_XBlocksSinceScheduled() {}

func (m *OutboundSignedStage) GetXBlocksSinceScheduled() isOutboundSignedStage_XBlocksSinceScheduled {
	if m != nil {
		return m.XBlocksSinceScheduled
	}
	return nil
}

func (m *OutboundSignedStage) GetScheduledOutboundHeight() int64 {
	if m != nil {
		return m.ScheduledOutboundHeight
	}
	return 0
}

func (m *OutboundSignedStage) GetBlocksSinceScheduled() int64 {
	if x, ok := m.GetXBlocksSinceScheduled().(*OutboundSignedStage_BlocksSinceScheduled); ok {
		return x.BlocksSinceScheduled
	}
	return 0
}

func (m *OutboundSignedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OutboundSignedStage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OutboundSignedStage_BlocksSinceScheduled)(nil),
	}
}

func init() {
	proto.RegisterType((*QueryTxStagesRequest)(nil), "types.QueryTxStagesRequest")
	proto.RegisterType((*QueryTxStagesResponse)(nil), "types.QueryTxStagesResponse")
	proto.RegisterType((*QueryTxStatusRequest)(nil), "types.QueryTxStatusRequest")
	proto.RegisterType((*QueryTxStatusResponse)(nil), "types.QueryTxStatusResponse")
	proto.RegisterType((*QueryTxRequest)(nil), "types.QueryTxRequest")
	proto.RegisterType((*QueryTxResponse)(nil), "types.QueryTxResponse")
	proto.RegisterType((*QueryObservedTx)(nil), "types.QueryObservedTx")
	proto.RegisterType((*QueryObservedTxVoter)(nil), "types.QueryObservedTxVoter")
	proto.RegisterType((*QueryTxVotersRequest)(nil), "types.QueryTxVotersRequest")
	proto.RegisterType((*PlannedOutTx)(nil), "types.PlannedOutTx")
	proto.RegisterType((*InboundObservedStage)(nil), "types.InboundObservedStage")
	proto.RegisterType((*InboundConfirmationCountedStage)(nil), "types.InboundConfirmationCountedStage")
	proto.RegisterType((*InboundFinalisedStage)(nil), "types.InboundFinalisedStage")
	proto.RegisterType((*SwapStatus)(nil), "types.SwapStatus")
	proto.RegisterType((*StreamingStatus)(nil), "types.StreamingStatus")
	proto.RegisterType((*SwapFinalisedStage)(nil), "types.SwapFinalisedStage")
	proto.RegisterType((*OutboundDelayStage)(nil), "types.OutboundDelayStage")
	proto.RegisterType((*OutboundSignedStage)(nil), "types.OutboundSignedStage")
}

func init() { proto.RegisterFile("types/query_tx.proto", fileDescriptor_7c005b9edeb76148) }

var fileDescriptor_7c005b9edeb76148 = []byte{
	// 1630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdf, 0x6e, 0x1b, 0x4d,
	0x15, 0xcf, 0xda, 0x8e, 0x13, 0x1f, 0x27, 0x71, 0x3a, 0x71, 0x12, 0xd7, 0x5f, 0xf0, 0x56, 0x46,
	0x94, 0x94, 0x96, 0xb8, 0x0a, 0x6d, 0x05, 0x54, 0x48, 0x74, 0x13, 0xa1, 0x9a, 0x16, 0xa5, 0x8c,
	0xd3, 0x4a, 0x70, 0xb3, 0x6c, 0xbc, 0x53, 0x7b, 0x15, 0x7b, 0xc7, 0xdd, 0x99, 0x4d, 0x9d, 0x17,
	0x40, 0x70, 0x81, 0xc4, 0x73, 0x80, 0x54, 0x24, 0xde, 0x01, 0xa9, 0x77, 0xf4, 0x82, 0x0b, 0xc4,
	0xc5, 0x82, 0xd2, 0x3b, 0x3f, 0x42, 0xaf, 0xd0, 0xfc, 0xd9, 0xf5, 0xae, 0xe3, 0x36, 0x6d, 0xf5,
	0xdd, 0x64, 0x67, 0xce, 0xef, 0x9c, 0x33, 0x73, 0xce, 0xfc, 0xce, 0x99, 0x71, 0xa0, 0xca, 0xcf,
	0x47, 0x84, 0xb5, 0x5e, 0x85, 0x24, 0x38, 0xb7, 0xf9, 0x78, 0x6f, 0x14, 0x50, 0x4e, 0xd1, 0xa2,
	0x94, 0xd6, 0xab, 0x3d, 0xda, 0xa3, 0x52, 0xd2, 0x12, 0x23, 0x05, 0xd6, 0xb7, 0xd3, 0x26, 0x67,
	0x4e, 0x38, 0xe0, 0x1a, 0xf8, 0x46, 0x01, 0xe2, 0xaf, 0xcd, 0x19, 0xb3, 0x87, 0x84, 0x07, 0x5e,
	0x37, 0x6b, 0xa5, 0xc0, 0xb1, 0x4d, 0xc3, 0xd8, 0x6a, 0x27, 0x05, 0xd0, 0x13, 0x46, 0x82, 0x33,
	0xe2, 0x26, 0x3b, 0xa9, 0x6f, 0x74, 0xe9, 0x70, 0x48, 0xfd, 0x96, 0xfa, 0x28, 0x61, 0xf3, 0x00,
	0xaa, 0xbf, 0x16, 0xab, 0x1f, 0x8f, 0x3b, 0xdc, 0xe9, 0x11, 0x86, 0xc9, 0xab, 0x90, 0x30, 0x8e,
	0x36, 0x60, 0x91, 0x8f, 0x6d, 0xcf, 0xad, 0x19, 0x37, 0x8c, 0xdd, 0x12, 0x2e, 0xf0, 0x71, 0xdb,
	0x45, 0x5b, 0x50, 0xec, 0x13, 0xaf, 0xd7, 0xe7, 0xb5, 0x9c, 0x94, 0xea, 0x59, 0xf3, 0xaf, 0x05,
	0xd8, 0x9c, 0xf1, 0xc2, 0x46, 0xd4, 0x67, 0x04, 0xfd, 0x0e, 0xd6, 0x3d, 0xff, 0x84, 0x86, 0xbe,
	0x9b, 0x6c, 0x48, 0x7a, 0x2c, 0xef, 0x7f, 0xb3, 0x27, 0x37, 0xbb, 0xd7, 0x56, 0xf0, 0x91, 0x46,
	0xa5, 0xbd, 0x55, 0x7b, 0x1b, 0x99, 0x0b, 0x93, 0xc8, 0xbc, 0x64, 0x8c, 0x2b, 0x5e, 0x56, 0x1f,
	0xf5, 0x61, 0x27, 0x56, 0xea, 0x52, 0xff, 0xa5, 0x17, 0x0c, 0x1d, 0xee, 0x51, 0xdf, 0xee, 0xd2,
	0xd0, 0xe7, 0xc4, 0x95, 0x3b, 0x2d, 0xef, 0xdf, 0xcc, 0xae, 0x76, 0x90, 0xd2, 0x3c, 0x50, 0x8a,
	0x72, 0x61, 0x5c, 0xf7, 0x3e, 0xaa, 0x80, 0xda, 0x70, 0x2d, 0x5e, 0xe9, 0xa5, 0xe7, 0x3b, 0x03,
	0x8f, 0x11, 0xb7, 0x96, 0x97, 0xee, 0x77, 0xb2, 0xee, 0x7f, 0x11, 0xc3, 0xca, 0x69, 0x1c, 0x45,
	0x22, 0x46, 0xfb, 0x50, 0x66, 0xaf, 0x9d, 0x91, 0xcd, 0xb8, 0xc3, 0x43, 0x56, 0x2b, 0x48, 0x27,
	0xd7, 0xb4, 0x93, 0xce, 0x6b, 0x67, 0xd4, 0x91, 0x00, 0x06, 0x96, 0x8c, 0xd1, 0xcf, 0x61, 0x4d,
	0xda, 0x4c, 0xd7, 0x5e, 0x94, 0x66, 0xd7, 0x53, 0x66, 0x33, 0x0b, 0xaf, 0xb2, 0xb4, 0x4c, 0x78,
	0xa0, 0x21, 0x57, 0x11, 0xb8, 0x64, 0xe0, 0x9c, 0xd7, 0x8a, 0x19, 0x0f, 0x47, 0x1a, 0x3c, 0x14,
	0x98, 0xf6, 0x40, 0xd3, 0x32, 0x74, 0x00, 0x95, 0xc4, 0x03, 0xf3, 0x7a, 0x3e, 0x71, 0x6b, 0x4b,
	0xd2, 0x45, 0x7d, 0xc6, 0x45, 0x47, 0x82, 0xca, 0x47, 0xb2, 0xa8, 0x12, 0x66, 0x29, 0x27, 0xa2,
	0xfc, 0x1a, 0xca, 0xfd, 0x29, 0x97, 0xa6, 0x9c, 0xf4, 0xa2, 0x29, 0x57, 0x87, 0x1c, 0x1f, 0x6b,
	0x92, 0xc1, 0x9e, 0x26, 0xfb, 0xf1, 0x18, 0xe7, 0xf8, 0x18, 0x3d, 0x84, 0xca, 0x68, 0xe0, 0xf8,
	0x3e, 0x71, 0x45, 0xd5, 0xd8, 0x7c, 0xcc, 0x6a, 0xb9, 0x1b, 0xf9, 0xdd, 0xf2, 0xfe, 0x86, 0xde,
	0xff, 0x33, 0x85, 0x1e, 0x85, 0xfc, 0x78, 0x8c, 0x57, 0x47, 0xa9, 0x19, 0x43, 0xcf, 0x61, 0x29,
	0x36, 0xca, 0x4b, 0xa3, 0x94, 0x77, 0xeb, 0xae, 0x60, 0xec, 0x5f, 0xfe, 0x6b, 0xee, 0xf6, 0x3c,
	0x3e, 0x70, 0x4e, 0x04, 0xd2, 0xe2, 0x7d, 0x1a, 0x74, 0xfb, 0x8e, 0xe7, 0xcb, 0x91, 0x4f, 0x5d,
	0xd2, 0x4a, 0x0c, 0x18, 0x2e, 0x52, 0xe5, 0xf6, 0x10, 0x8a, 0x4c, 0x16, 0x8d, 0xa6, 0x41, 0xcc,
	0xa5, 0xb9, 0x05, 0x65, 0xad, 0xe9, 0xca, 0xd0, 0x36, 0x58, 0x7f, 0x9b, 0x3f, 0x83, 0x35, 0x6d,
	0xf0, 0x55, 0xe9, 0xfc, 0x7b, 0x0e, 0x2a, 0x89, 0xbd, 0x4e, 0xe4, 0x53, 0x28, 0xa7, 0x9a, 0x88,
	0xce, 0xe8, 0x56, 0x7a, 0x77, 0x71, 0x11, 0x1e, 0x8f, 0xad, 0x0d, 0xbd, 0xaf, 0xb4, 0x09, 0x06,
	0x9a, 0x28, 0xa0, 0x5b, 0xb0, 0xde, 0x15, 0x6e, 0x7d, 0x16, 0x32, 0x3b, 0xb5, 0x87, 0x3c, 0xae,
	0x24, 0xf2, 0xc7, 0x52, 0x2c, 0x54, 0x13, 0x92, 0xc7, 0xaa, 0x79, 0xa5, 0x9a, 0xc8, 0xb5, 0xea,
	0xf7, 0x53, 0x84, 0xd4, 0x9a, 0x05, 0xa9, 0x99, 0x90, 0x4e, 0x2b, 0x62, 0x58, 0x3b, 0x25, 0xe7,
	0x82, 0xb3, 0xba, 0x97, 0xea, 0xea, 0xd9, 0xd6, 0xf1, 0x1c, 0x33, 0xf6, 0x44, 0xe1, 0xbf, 0x92,
	0xb0, 0x85, 0x26, 0x91, 0x39, 0x63, 0x82, 0x57, 0x4f, 0xd3, 0x2a, 0xcd, 0x7f, 0x16, 0x74, 0xd2,
	0xa6, 0x79, 0x40, 0x37, 0xe7, 0xb3, 0xcf, 0x02, 0x9d, 0x9f, 0x1c, 0x57, 0x4c, 0xdc, 0x92, 0xa7,
	0x2e, 0x8a, 0x5f, 0x1f, 0x84, 0x9a, 0xa1, 0xef, 0x00, 0x08, 0x92, 0xf5, 0x1d, 0xd6, 0x27, 0x8a,
	0x67, 0x25, 0x5c, 0xa2, 0x21, 0x7f, 0x2c, 0x05, 0xa8, 0x0d, 0x2b, 0x27, 0x03, 0xda, 0x3d, 0xcd,
	0x04, 0x6b, 0xdd, 0x9c, 0x44, 0x66, 0x93, 0x8c, 0x39, 0x09, 0x7c, 0x67, 0x30, 0xed, 0xfc, 0x4a,
	0xe7, 0x0e, 0x1d, 0x7a, 0x9c, 0x0c, 0x47, 0xfc, 0x1c, 0x97, 0xa5, 0xad, 0xce, 0x48, 0x0d, 0x96,
	0x64, 0x09, 0x07, 0xac, 0xb6, 0x28, 0x97, 0x89, 0xa7, 0xe8, 0x37, 0xb0, 0x9e, 0xf8, 0x18, 0x85,
	0x27, 0xf6, 0x29, 0x51, 0x9d, 0xa2, 0x64, 0xb5, 0x3e, 0x44, 0xe6, 0xed, 0xcf, 0x62, 0xf8, 0xb3,
	0xf0, 0xe4, 0x09, 0x39, 0xc7, 0x6b, 0xb1, 0x23, 0x35, 0x17, 0xe1, 0x25, 0x39, 0x65, 0xb2, 0x77,
	0xe4, 0x71, 0x29, 0xce, 0xaa, 0x58, 0x39, 0x39, 0xe1, 0x38, 0xc2, 0x65, 0x19, 0xe1, 0xdd, 0x49,
	0x64, 0xde, 0x49, 0x22, 0xcc, 0x34, 0x7a, 0xd9, 0xc9, 0x2e, 0xc7, 0xba, 0x16, 0x3b, 0xd2, 0xe1,
	0x36, 0x00, 0x9c, 0x5e, 0x2f, 0x20, 0x3d, 0x87, 0xd3, 0xa0, 0x56, 0x92, 0x49, 0x4f, 0x49, 0xd0,
	0x6d, 0xb8, 0x36, 0x9d, 0xd9, 0xdc, 0x09, 0x7a, 0x84, 0xd7, 0x40, 0xaa, 0xad, 0x4f, 0x81, 0x63,
	0x29, 0x47, 0x2f, 0x60, 0xfb, 0x92, 0xb2, 0x3d, 0xf0, 0x86, 0x1e, 0xaf, 0x95, 0x65, 0xa2, 0x1a,
	0x6f, 0x23, 0xd3, 0xf8, 0x4f, 0x64, 0x6e, 0x75, 0x29, 0x1b, 0x52, 0xc6, 0xdc, 0xd3, 0x3d, 0x8f,
	0xb6, 0x86, 0x0e, 0xef, 0xef, 0x3d, 0xf7, 0x7c, 0x8e, 0x37, 0x67, 0x5d, 0x3e, 0x15, 0xc6, 0xcd,
	0x37, 0x05, 0xdd, 0x1b, 0xa7, 0x8c, 0x7a, 0x41, 0x39, 0x09, 0xd0, 0x2f, 0x33, 0xc5, 0x6c, 0xdd,
	0xbf, 0x88, 0xcc, 0xc2, 0xf1, 0xb8, 0x7d, 0xf8, 0x21, 0x32, 0x6f, 0x7d, 0x66, 0xc7, 0x69, 0x1f,
	0xea, 0x1e, 0xb0, 0x2f, 0x29, 0x9a, 0xfb, 0x64, 0x39, 0xcf, 0xd2, 0xf5, 0x41, 0xd2, 0x37, 0x64,
	0x21, 0x5a, 0x8d, 0x49, 0x64, 0xd6, 0x67, 0xeb, 0x39, 0x95, 0x7d, 0xad, 0x8d, 0xee, 0x43, 0x5e,
	0xf4, 0xcb, 0x82, 0xec, 0x97, 0x1f, 0x5b, 0xac, 0xac, 0x17, 0x13, 0xaa, 0x58, 0xfc, 0x41, 0x0f,
	0x61, 0xc9, 0xe9, 0x8a, 0xd3, 0x55, 0xdc, 0x2c, 0xef, 0xaf, 0xc7, 0x65, 0x3a, 0x3e, 0x0a, 0x79,
	0x9b, 0x93, 0xa1, 0x55, 0xd1, 0x46, 0xb1, 0x22, 0x8e, 0x07, 0xe9, 0x3e, 0x5d, 0xfc, 0x16, 0xfb,
	0xf4, 0xbc, 0xae, 0xb4, 0x34, 0xbf, 0x2b, 0x7d, 0x17, 0x56, 0xc3, 0x91, 0xeb, 0x70, 0xe2, 0xaa,
	0x47, 0x9d, 0x24, 0xf1, 0x32, 0x5e, 0xd1, 0xc2, 0x17, 0x42, 0x86, 0xea, 0xb0, 0x1c, 0x90, 0x33,
	0x12, 0x88, 0x47, 0x4a, 0x49, 0xe2, 0xc9, 0x7c, 0x5e, 0x5b, 0x83, 0x79, 0x6d, 0x2d, 0x75, 0x97,
	0x4a, 0x9e, 0x7c, 0xdd, 0x5d, 0xfa, 0xc6, 0x80, 0x95, 0xf4, 0xc5, 0x87, 0x4c, 0x58, 0x94, 0xf9,
	0xd0, 0x6c, 0x2b, 0x4d, 0x22, 0x53, 0x09, 0xb0, 0xfa, 0xa0, 0x1f, 0x02, 0x70, 0x6a, 0x3b, 0xae,
	0x1b, 0x10, 0xa6, 0x3b, 0x98, 0xb5, 0x36, 0x89, 0xcc, 0x94, 0x14, 0x97, 0x38, 0x7d, 0xa4, 0x86,
	0xe8, 0x07, 0x50, 0xe8, 0x52, 0xcf, 0xd7, 0x8f, 0xa5, 0x95, 0xf8, 0x38, 0x0e, 0xa8, 0xe7, 0x5b,
	0xcb, 0x93, 0xc8, 0x94, 0x28, 0x96, 0x7f, 0x51, 0x13, 0x8a, 0x01, 0x79, 0x19, 0xfa, 0xae, 0xec,
	0x6d, 0xcb, 0x16, 0x88, 0xcb, 0x4e, 0x49, 0xb0, 0xfe, 0x36, 0xff, 0x61, 0x40, 0x75, 0xde, 0xbb,
	0x51, 0xf6, 0x34, 0xee, 0xc8, 0x94, 0x1a, 0x32, 0xa5, 0xf1, 0x14, 0xdd, 0x83, 0xad, 0x51, 0x40,
	0xe6, 0x3c, 0x11, 0xf5, 0x25, 0x54, 0x1d, 0x05, 0xe4, 0xd2, 0xa3, 0x0f, 0xdd, 0x85, 0xb2, 0x3c,
	0x5b, 0xad, 0xaa, 0xb8, 0x5f, 0x11, 0xd7, 0x5c, 0x4a, 0x8c, 0x41, 0x4e, 0x94, 0xc5, 0x6d, 0x28,
	0x75, 0xe9, 0x70, 0x34, 0x20, 0x62, 0x0f, 0x2a, 0x82, 0xd5, 0x49, 0x64, 0x4e, 0x85, 0x78, 0x3a,
	0x6c, 0xfe, 0x31, 0x0f, 0xe6, 0x15, 0x2f, 0x52, 0xb4, 0x0f, 0x9b, 0x72, 0x15, 0xcf, 0xef, 0xd9,
	0x32, 0x98, 0x98, 0x10, 0x86, 0xdc, 0xf7, 0x46, 0x0c, 0x76, 0x04, 0xa6, 0xf9, 0x57, 0x8d, 0xcf,
	0x4f, 0x9d, 0xb3, 0x3e, 0xb4, 0x1f, 0x43, 0xed, 0x63, 0x77, 0x84, 0xbe, 0x5e, 0xb7, 0x62, 0x3c,
	0xce, 0xaa, 0xf6, 0xf7, 0x04, 0x9a, 0x57, 0xf7, 0x5e, 0x7d, 0xf1, 0x9a, 0xb1, 0x66, 0x3a, 0x22,
	0xf9, 0x7a, 0xd4, 0xce, 0xfa, 0xd0, 0x08, 0xc8, 0xd0, 0xf1, 0x7c, 0x11, 0x51, 0xc6, 0x1b, 0x23,
	0x5d, 0xea, 0xbb, 0x4c, 0xde, 0xcc, 0x79, 0xab, 0x39, 0x89, 0xcc, 0x2b, 0x34, 0xf1, 0x4e, 0x82,
	0xa7, 0x57, 0xeb, 0x28, 0x34, 0x7b, 0x16, 0xc5, 0x2b, 0xce, 0xe2, 0x10, 0x36, 0xe7, 0xbe, 0xde,
	0xb3, 0x5e, 0x8c, 0x2b, 0xbc, 0x78, 0x00, 0xd3, 0xe7, 0x3b, 0xfa, 0x1e, 0x2c, 0x8d, 0x88, 0xef,
	0x7a, 0x7e, 0x4f, 0x1b, 0x96, 0x45, 0xc3, 0xd2, 0x22, 0x1c, 0x0f, 0xd0, 0x3d, 0x28, 0x31, 0x1e,
	0x10, 0x67, 0x28, 0x14, 0xb3, 0x7d, 0xb9, 0x13, 0xcb, 0xf5, 0x23, 0x77, 0xaa, 0xd8, 0xfc, 0xbd,
	0x01, 0x95, 0x19, 0x18, 0xed, 0xc2, 0xb2, 0xe7, 0x73, 0x12, 0x9c, 0x39, 0x03, 0xc5, 0x0f, 0x6b,
	0x65, 0x12, 0x99, 0x89, 0x0c, 0x27, 0x23, 0xa1, 0xf9, 0x2a, 0x74, 0x7c, 0xee, 0xf1, 0x73, 0x55,
	0x01, 0x4a, 0x33, 0x96, 0xe1, 0x64, 0x24, 0x9b, 0x41, 0x8a, 0xfd, 0xaa, 0x19, 0x48, 0xde, 0xab,
	0x4f, 0xf3, 0x11, 0xa0, 0xcb, 0xbf, 0x3d, 0xbe, 0x2c, 0x6d, 0x7f, 0x33, 0x00, 0x5d, 0xfe, 0xf5,
	0x21, 0x8a, 0x76, 0x4a, 0x00, 0xc5, 0x35, 0xf9, 0x82, 0x61, 0x9a, 0xfc, 0xd5, 0x04, 0x95, 0x46,
	0x96, 0xc4, 0xd0, 0x03, 0xd8, 0x9e, 0xb5, 0x8a, 0x99, 0xa5, 0x6a, 0x7d, 0x33, 0x6b, 0x36, 0x97,
	0x2e, 0xf9, 0x2b, 0x76, 0xfc, 0x2f, 0x03, 0x36, 0xe6, 0xfc, 0xd8, 0x41, 0x3f, 0x85, 0xeb, 0xac,
	0xdb, 0x27, 0x6e, 0x38, 0x50, 0xbf, 0x31, 0x32, 0x3d, 0x5c, 0xed, 0x7a, 0x3b, 0x51, 0x38, 0xca,
	0xbe, 0x51, 0x7f, 0x02, 0x5b, 0x2a, 0x3c, 0x9b, 0x79, 0x7e, 0x97, 0xd8, 0x89, 0x9e, 0xda, 0xf7,
	0xe3, 0x05, 0x5c, 0x55, 0x78, 0x47, 0xc0, 0x9d, 0x18, 0xfd, 0x83, 0x61, 0x7c, 0xd1, 0xde, 0xad,
	0xeb, 0xb0, 0x6d, 0xcf, 0x5f, 0xc8, 0x6a, 0xbf, 0xbd, 0x68, 0x18, 0xef, 0x2e, 0x1a, 0xc6, 0xff,
	0x2e, 0x1a, 0xc6, 0x9f, 0xdf, 0x37, 0x16, 0xde, 0xbd, 0x6f, 0x2c, 0xfc, 0xfb, 0x7d, 0x63, 0xe1,
	0xb7, 0xad, 0x4f, 0x5f, 0x98, 0xe3, 0xb4, 0x50, 0x50, 0xf7, 0xa4, 0x28, 0xff, 0xc1, 0xf0, 0xa3,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xc3, 0x08, 0xfc, 0x17, 0x11, 0x00, 0x00,
}

func (m *QueryTxStagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStagesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStagesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxStagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundSigned != nil {
		{
			size, err := m.OutboundSigned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OutboundDelay != nil {
		{
			size, err := m.OutboundDelay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SwapFinalised != nil {
		{
			size, err := m.SwapFinalised.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SwapStatus != nil {
		{
			size, err := m.SwapStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.InboundFinalised != nil {
		{
			size, err := m.InboundFinalised.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InboundConfirmationCounted != nil {
		{
			size, err := m.InboundConfirmationCounted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.InboundObserved.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTxStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stages.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.OutTxs) > 0 {
		for iNdEx := len(m.OutTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlannedOutTxs) > 0 {
		for iNdEx := len(m.PlannedOutTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlannedOutTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeysignMetric != nil {
		{
			size, err := m.KeysignMetric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OutboundHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.OutboundHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.FinalisedHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.FinalisedHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ConsensusHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ObservedTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryObservedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObservedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObservedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregatorTargetLimit != nil {
		{
			size := m.AggregatorTargetLimit.Size()
			i -= size
			if _, err := m.AggregatorTargetLimit.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AggregatorTarget) > 0 {
		i -= len(m.AggregatorTarget)
		copy(dAtA[i:], m.AggregatorTarget)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.AggregatorTarget)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Aggregator) > 0 {
		i -= len(m.Aggregator)
		copy(dAtA[i:], m.Aggregator)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Aggregator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FinaliseHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.FinaliseHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.KeysignMs != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.KeysignMs))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ObservedPubKey) > 0 {
		i -= len(m.ObservedPubKey)
		copy(dAtA[i:], m.ObservedPubKey)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.ObservedPubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutHashes) > 0 {
		for iNdEx := len(m.OutHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutHashes[iNdEx])
			copy(dAtA[i:], m.OutHashes[iNdEx])
			i = encodeVarintQueryTx(dAtA, i, uint64(len(m.OutHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryObservedTxVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObservedTxVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObservedTxVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.OutboundHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.Reverted {
		i--
		if m.Reverted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.UpdatedVault {
		i--
		if m.UpdatedVault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FinalisedHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.FinalisedHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OutTxs) > 0 {
		for iNdEx := len(m.OutTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Height != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxVotersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxVotersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxVotersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlannedOutTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannedOutTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannedOutTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refund {
		i--
		if m.Refund {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InboundObservedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundObservedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundObservedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FinalCount != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.FinalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.PreConfirmationCount != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.PreConfirmationCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Started {
		i--
		if m.Started {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InboundConfirmationCountedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundConfirmationCountedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundConfirmationCountedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.RemainingConfirmationSeconds != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.RemainingConfirmationSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.ExternalConfirmationDelayHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ExternalConfirmationDelayHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalObservedHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ExternalObservedHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if m.CountingStartHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.CountingStartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InboundFinalisedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundFinalisedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundFinalisedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Streaming != nil {
		{
			size, err := m.Streaming.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pending {
		i--
		if m.Pending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Quantity != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if m.Interval != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapFinalisedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapFinalisedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapFinalisedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutboundDelayStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundDelayStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundDelayStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RemainingDelaySeconds != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.RemainingDelaySeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.RemainingDelayBlocks != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.RemainingDelayBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutboundSignedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundSignedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundSignedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.XBlocksSinceScheduled != nil {
		{
			size := m.XBlocksSinceScheduled.Size()
			i -= size
			if _, err := m.XBlocksSinceScheduled.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ScheduledOutboundHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ScheduledOutboundHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutboundSignedStage_BlocksSinceScheduled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundSignedStage_BlocksSinceScheduled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQueryTx(dAtA, i, uint64(m.BlocksSinceScheduled))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func encodeVarintQueryTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTxStagesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxStagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InboundObserved.Size()
	n += 1 + l + sovQueryTx(uint64(l))
	if m.InboundConfirmationCounted != nil {
		l = m.InboundConfirmationCounted.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.InboundFinalised != nil {
		l = m.InboundFinalised.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.SwapStatus != nil {
		l = m.SwapStatus.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.SwapFinalised != nil {
		l = m.SwapFinalised.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.OutboundDelay != nil {
		l = m.OutboundDelay.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.OutboundSigned != nil {
		l = m.OutboundSigned.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if len(m.PlannedOutTxs) > 0 {
		for _, e := range m.PlannedOutTxs {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if len(m.OutTxs) > 0 {
		for _, e := range m.OutTxs {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	l = m.Stages.Size()
	n += 1 + l + sovQueryTx(uint64(l))
	return n
}

func (m *QueryTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObservedTx.Size()
	n += 1 + l + sovQueryTx(uint64(l))
	if m.ConsensusHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ConsensusHeight))
	}
	if m.FinalisedHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.FinalisedHeight))
	}
	if m.OutboundHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.OutboundHeight))
	}
	if m.KeysignMetric != nil {
		l = m.KeysignMetric.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryObservedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovQueryTx(uint64(l))
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if len(m.OutHashes) > 0 {
		for _, s := range m.OutHashes {
			l = len(s)
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.BlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	l = len(m.ObservedPubKey)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.KeysignMs != 0 {
		n += 1 + sovQueryTx(uint64(m.KeysignMs))
	}
	if m.FinaliseHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.FinaliseHeight))
	}
	l = len(m.Aggregator)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.AggregatorTarget)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.AggregatorTargetLimit != nil {
		l = m.AggregatorTargetLimit.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryObservedTxVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovQueryTx(uint64(l))
	if m.Height != 0 {
		n += 1 + sovQueryTx(uint64(m.Height))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if len(m.OutTxs) > 0 {
		for _, e := range m.OutTxs {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if m.FinalisedHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.FinalisedHeight))
	}
	if m.UpdatedVault {
		n += 2
	}
	if m.Reverted {
		n += 2
	}
	if m.OutboundHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.OutboundHeight))
	}
	return n
}

func (m *QueryTxVotersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *PlannedOutTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.Refund {
		n += 2
	}
	return n
}

func (m *InboundObservedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Started {
		n += 2
	}
	if m.PreConfirmationCount != 0 {
		n += 1 + sovQueryTx(uint64(m.PreConfirmationCount))
	}
	if m.FinalCount != 0 {
		n += 1 + sovQueryTx(uint64(m.FinalCount))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *InboundConfirmationCountedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountingStartHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.CountingStartHeight))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.ExternalObservedHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ExternalObservedHeight))
	}
	if m.ExternalConfirmationDelayHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ExternalConfirmationDelayHeight))
	}
	if m.RemainingConfirmationSeconds != 0 {
		n += 1 + sovQueryTx(uint64(m.RemainingConfirmationSeconds))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *InboundFinalisedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed {
		n += 2
	}
	return n
}

func (m *SwapStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pending {
		n += 2
	}
	if m.Streaming != nil {
		l = m.Streaming.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *StreamingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovQueryTx(uint64(m.Interval))
	}
	if m.Quantity != 0 {
		n += 1 + sovQueryTx(uint64(m.Quantity))
	}
	if m.Count != 0 {
		n += 1 + sovQueryTx(uint64(m.Count))
	}
	return n
}

func (m *SwapFinalisedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed {
		n += 2
	}
	return n
}

func (m *OutboundDelayStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingDelayBlocks != 0 {
		n += 1 + sovQueryTx(uint64(m.RemainingDelayBlocks))
	}
	if m.RemainingDelaySeconds != 0 {
		n += 1 + sovQueryTx(uint64(m.RemainingDelaySeconds))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *OutboundSignedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledOutboundHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ScheduledOutboundHeight))
	}
	if m.XBlocksSinceScheduled != nil {
		n += m.XBlocksSinceScheduled.Size()
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *OutboundSignedStage_BlocksSinceScheduled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQueryTx(uint64(m.BlocksSinceScheduled))
	return n
}

func sovQueryTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTx(x uint64) (n int) {
	return sovQueryTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTxStagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxStagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundObserved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InboundObserved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationCounted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundConfirmationCounted == nil {
				m.InboundConfirmationCounted = &InboundConfirmationCountedStage{}
			}
			if err := m.InboundConfirmationCounted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundFinalised", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundFinalised == nil {
				m.InboundFinalised = &InboundFinalisedStage{}
			}
			if err := m.InboundFinalised.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapStatus == nil {
				m.SwapStatus = &SwapStatus{}
			}
			if err := m.SwapStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFinalised", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapFinalised == nil {
				m.SwapFinalised = &SwapFinalisedStage{}
			}
			if err := m.SwapFinalised.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundDelay == nil {
				m.OutboundDelay = &OutboundDelayStage{}
			}
			if err := m.OutboundDelay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundSigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundSigned == nil {
				m.OutboundSigned = &OutboundSignedStage{}
			}
			if err := m.OutboundSigned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &common.Tx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlannedOutTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlannedOutTxs = append(m.PlannedOutTxs, &PlannedOutTx{})
			if err := m.PlannedOutTxs[len(m.PlannedOutTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxs = append(m.OutTxs, common.Tx{})
			if err := m.OutTxs[len(m.OutTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObservedTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			m.ConsensusHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalisedHeight", wireType)
			}
			m.FinalisedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalisedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundHeight", wireType)
			}
			m.OutboundHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysignMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeysignMetric == nil {
				m.KeysignMetric = &TssKeysignMetric{}
			}
			if err := m.KeysignMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObservedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObservedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObservedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHashes = append(m.OutHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedPubKey = gitlab_com_thorchain_thornode_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysignMs", wireType)
			}
			m.KeysignMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeysignMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinaliseHeight", wireType)
			}
			m.FinaliseHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinaliseHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Uint
			m.AggregatorTargetLimit = &v
			if err := m.AggregatorTargetLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObservedTxVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObservedTxVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObservedTxVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = gitlab_com_thorchain_thornode_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, QueryObservedTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, TxOutItem{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxs = append(m.OutTxs, common.Tx{})
			if err := m.OutTxs[len(m.OutTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalisedHeight", wireType)
			}
			m.FinalisedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalisedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedVault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatedVault = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverted = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundHeight", wireType)
			}
			m.OutboundHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxVotersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxVotersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxVotersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlannedOutTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannedOutTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannedOutTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &common.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refund = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundObservedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundObservedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundObservedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Started = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreConfirmationCount", wireType)
			}
			m.PreConfirmationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreConfirmationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalCount", wireType)
			}
			m.FinalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundConfirmationCountedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundConfirmationCountedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundConfirmationCountedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountingStartHeight", wireType)
			}
			m.CountingStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountingStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalObservedHeight", wireType)
			}
			m.ExternalObservedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalObservedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalConfirmationDelayHeight", wireType)
			}
			m.ExternalConfirmationDelayHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalConfirmationDelayHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingConfirmationSeconds", wireType)
			}
			m.RemainingConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundFinalisedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundFinalisedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundFinalisedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pending = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streaming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Streaming == nil {
				m.Streaming = &StreamingStatus{}
			}
			if err := m.Streaming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapFinalisedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapFinalisedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapFinalisedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundDelayStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundDelayStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundDelayStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingDelayBlocks", wireType)
			}
			m.RemainingDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingDelaySeconds", wireType)
			}
			m.RemainingDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundSignedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundSignedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundSignedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledOutboundHeight", wireType)
			}
			m.ScheduledOutboundHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledOutboundHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksSinceScheduled", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XBlocksSinceScheduled = &OutboundSignedStage_BlocksSinceScheduled{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTx = fmt.Errorf("proto: unexpected end of group")
)
