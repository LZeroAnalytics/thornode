// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_tx_out.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/v3/common"
	gitlab_com_thorchain_thornode_v3_common "gitlab.com/thorchain/thornode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxOutItem struct {
	Chain                 gitlab_com_thorchain_thornode_v3_common.Chain   `protobuf:"bytes,1,opt,name=chain,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Chain" json:"chain"`
	ToAddress             gitlab_com_thorchain_thornode_v3_common.Address `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Address" json:"to_address"`
	VaultPubKey           gitlab_com_thorchain_thornode_v3_common.PubKey  `protobuf:"bytes,3,opt,name=vault_pub_key,json=vaultPubKey,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.PubKey" json:"vault_pub_key,omitempty"`
	Coin                  common.Coin                                     `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin"`
	Memo                  string                                          `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	MaxGas                gitlab_com_thorchain_thornode_v3_common.Gas     `protobuf:"bytes,6,rep,name=max_gas,json=maxGas,proto3,castrepeated=gitlab.com/thorchain/thornode/v3/common.Gas" json:"max_gas"`
	GasRate               int64                                           `protobuf:"varint,7,opt,name=gas_rate,json=gasRate,proto3" json:"gas_rate,omitempty"`
	InHash                gitlab_com_thorchain_thornode_v3_common.TxID    `protobuf:"bytes,8,opt,name=in_hash,json=inHash,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.TxID" json:"in_hash,omitempty"`
	OutHash               gitlab_com_thorchain_thornode_v3_common.TxID    `protobuf:"bytes,9,opt,name=out_hash,json=outHash,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.TxID" json:"out_hash,omitempty"`
	ModuleName            string                                          `protobuf:"bytes,10,opt,name=module_name,json=-,proto3" json:"-"`
	Aggregator            string                                          `protobuf:"bytes,11,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AggregatorTargetAsset string                                          `protobuf:"bytes,12,opt,name=aggregator_target_asset,json=aggregatorTargetAsset,proto3" json:"aggregator_target_asset,omitempty"`
	AggregatorTargetLimit *cosmossdk_io_math.Uint                         `protobuf:"bytes,13,opt,name=aggregator_target_limit,json=aggregatorTargetLimit,proto3,customtype=cosmossdk.io/math.Uint" json:"aggregator_target_limit,omitempty"`
	CloutSpent            *cosmossdk_io_math.Uint                         `protobuf:"bytes,14,opt,name=clout_spent,json=cloutSpent,proto3,customtype=cosmossdk.io/math.Uint" json:"clout_spent,omitempty"`
	VaultPubKeyEddsa      gitlab_com_thorchain_thornode_v3_common.PubKey  `protobuf:"bytes,15,opt,name=vault_pub_key_eddsa,json=vaultPubKeyEddsa,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.PubKey" json:"vault_pub_key_eddsa,omitempty"`
}

func (m *TxOutItem) Reset()      { *m = TxOutItem{} }
func (*TxOutItem) ProtoMessage() {}
func (*TxOutItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_94b7695443313e72, []int{0}
}
func (m *TxOutItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutItem.Merge(m, src)
}
func (m *TxOutItem) XXX_Size() int {
	return m.Size()
}
func (m *TxOutItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutItem.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutItem proto.InternalMessageInfo

type TxOut struct {
	Height  int64       `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	TxArray []TxOutItem `protobuf:"bytes,2,rep,name=tx_array,json=txArray,proto3" json:"tx_array"`
}

func (m *TxOut) Reset()      { *m = TxOut{} }
func (*TxOut) ProtoMessage() {}
func (*TxOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_94b7695443313e72, []int{1}
}
func (m *TxOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOut.Merge(m, src)
}
func (m *TxOut) XXX_Size() int {
	return m.Size()
}
func (m *TxOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOut.DiscardUnknown(m)
}

var xxx_messageInfo_TxOut proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TxOutItem)(nil), "types.TxOutItem")
	proto.RegisterType((*TxOut)(nil), "types.TxOut")
}

func init() { proto.RegisterFile("types/type_tx_out.proto", fileDescriptor_94b7695443313e72) }

var fileDescriptor_94b7695443313e72 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0xc7, 0x6d, 0xf2, 0xe2, 0x64, 0x03, 0xcf, 0x83, 0x96, 0xe7, 0x81, 0x2d, 0x52, 0xed, 0x88,
	0x13, 0x52, 0x8b, 0xdd, 0x82, 0xc4, 0x81, 0x43, 0xab, 0xa4, 0xad, 0x28, 0xa2, 0x52, 0x91, 0x4b,
	0x11, 0xea, 0xc5, 0xdd, 0xc4, 0x2b, 0xdb, 0x22, 0xf6, 0x46, 0xde, 0x31, 0x72, 0x6e, 0x7c, 0x84,
	0x7e, 0x8e, 0x7e, 0x92, 0x1c, 0x39, 0xa2, 0xaa, 0x72, 0x4b, 0xb8, 0x45, 0xfd, 0x04, 0x39, 0x55,
	0x5e, 0x43, 0x49, 0x45, 0xa5, 0x46, 0x5c, 0xec, 0xd9, 0x99, 0xf9, 0xff, 0x66, 0x77, 0x35, 0x3b,
	0x68, 0x05, 0x06, 0x7d, 0x26, 0xac, 0xfc, 0xeb, 0x40, 0xea, 0xf0, 0x04, 0xcc, 0x7e, 0xcc, 0x81,
	0xe3, 0x8a, 0x0c, 0xac, 0x2e, 0x75, 0x79, 0x18, 0xf2, 0xc8, 0x2a, 0x7e, 0x45, 0x6c, 0xf5, 0x3f,
	0x8f, 0x7b, 0x5c, 0x9a, 0x56, 0x6e, 0x15, 0xde, 0xb5, 0x1f, 0x1a, 0xaa, 0x1f, 0xa6, 0x6f, 0x13,
	0xd8, 0x03, 0x16, 0xe2, 0x03, 0x54, 0xe9, 0xfa, 0x34, 0x88, 0x88, 0xda, 0x54, 0xd7, 0xeb, 0xed,
	0x9d, 0x71, 0x66, 0x14, 0x8e, 0x49, 0x66, 0x6c, 0x78, 0x01, 0xf4, 0x68, 0xc7, 0xec, 0xf2, 0xd0,
	0x02, 0x9f, 0xc7, 0xd2, 0x2f, 0xad, 0x88, 0xbb, 0xcc, 0x3a, 0xdd, 0xba, 0x29, 0xf7, 0x22, 0x0f,
	0xd8, 0x85, 0x0e, 0x7f, 0x44, 0x08, 0xb8, 0x43, 0x5d, 0x37, 0x66, 0x42, 0x90, 0x39, 0x89, 0x6d,
	0x8d, 0x33, 0x63, 0xca, 0x3b, 0xc9, 0x0c, 0x6b, 0x56, 0x76, 0xab, 0x90, 0xd8, 0x75, 0xe0, 0xd7,
	0x26, 0x3e, 0x42, 0x0b, 0xa7, 0x34, 0xe9, 0x81, 0xd3, 0x4f, 0x3a, 0xce, 0x09, 0x1b, 0x90, 0x92,
	0x2c, 0xb2, 0x39, 0xc9, 0x0c, 0x73, 0x56, 0xec, 0x41, 0xd2, 0xd9, 0x67, 0x03, 0xbb, 0x21, 0x41,
	0xc5, 0x02, 0x9b, 0xa8, 0xdc, 0xe5, 0x41, 0x44, 0xca, 0x4d, 0x75, 0xbd, 0xb1, 0x39, 0x6f, 0xde,
	0x9c, 0x8e, 0x07, 0x51, 0x7b, 0x7e, 0x98, 0x19, 0xca, 0x38, 0x33, 0x64, 0x86, 0x2d, 0xbf, 0x18,
	0xa3, 0x72, 0xc8, 0x42, 0x4e, 0x2a, 0x79, 0x79, 0x5b, 0xda, 0x98, 0x21, 0x2d, 0xa4, 0xa9, 0xe3,
	0x51, 0x41, 0xaa, 0xcd, 0xd2, 0x1d, 0xcc, 0xb3, 0x6b, 0xcc, 0x4d, 0xd2, 0xe7, 0x6f, 0xc6, 0xa3,
	0x59, 0xb7, 0xbc, 0x4b, 0x85, 0x5d, 0x0d, 0x69, 0xba, 0x4b, 0x05, 0x7e, 0x80, 0x6a, 0x1e, 0x15,
	0x4e, 0x4c, 0x81, 0x11, 0xad, 0xa9, 0xae, 0x97, 0x6c, 0xcd, 0xa3, 0xc2, 0xa6, 0xc0, 0xf0, 0x1e,
	0xd2, 0x82, 0xc8, 0xf1, 0xa9, 0xf0, 0x49, 0x4d, 0xde, 0xcb, 0x93, 0x49, 0x66, 0x3c, 0x9e, 0xb5,
	0xc8, 0x61, 0xba, 0xf7, 0xd2, 0xae, 0x06, 0xd1, 0x6b, 0x2a, 0x7c, 0xbc, 0x8f, 0x6a, 0x3c, 0x81,
	0x82, 0x55, 0xbf, 0x27, 0x4b, 0xe3, 0x09, 0x48, 0xd8, 0x43, 0xd4, 0x08, 0xb9, 0x9b, 0xf4, 0x98,
	0x13, 0xd1, 0x90, 0x11, 0x24, 0x79, 0x95, 0x71, 0x66, 0xa8, 0x1b, 0xb6, 0xba, 0x81, 0x75, 0x84,
	0xa8, 0xe7, 0xc5, 0xcc, 0xa3, 0xc0, 0x63, 0xd2, 0x90, 0x57, 0x3a, 0xe5, 0xc1, 0xdb, 0x68, 0xe5,
	0x76, 0xe5, 0x00, 0x8d, 0x3d, 0x06, 0x0e, 0x15, 0x82, 0x01, 0x99, 0x97, 0xc9, 0xff, 0xdf, 0x86,
	0x0f, 0x65, 0xb4, 0x95, 0x07, 0xf1, 0xd1, 0x9f, 0x74, 0xbd, 0x20, 0x0c, 0x80, 0x2c, 0xc8, 0x2d,
	0xe8, 0xc3, 0xcc, 0x50, 0xbf, 0x64, 0xc6, 0x72, 0x97, 0x8b, 0x90, 0x0b, 0xe1, 0x9e, 0x98, 0x01,
	0xb7, 0x42, 0x0a, 0xbe, 0xf9, 0x3e, 0x88, 0xe0, 0x2e, 0xf7, 0x4d, 0x2e, 0xc6, 0xcf, 0x51, 0xa3,
	0xdb, 0xcb, 0x6f, 0x47, 0xf4, 0x59, 0x04, 0xe4, 0x9f, 0x99, 0x58, 0x48, 0x4a, 0xde, 0xe5, 0x0a,
	0xcc, 0xd0, 0xd2, 0x6f, 0x5d, 0xec, 0x30, 0xd7, 0x15, 0x94, 0xfc, 0x2b, 0x41, 0xdb, 0x39, 0xe8,
	0x1e, 0xfd, 0xbc, 0x38, 0xd5, 0xcf, 0xaf, 0x72, 0xde, 0xda, 0x31, 0xaa, 0xc8, 0xd7, 0x8e, 0x97,
	0x51, 0xd5, 0x67, 0x81, 0xe7, 0x83, 0x7c, 0xea, 0x25, 0xfb, 0x7a, 0x85, 0x9f, 0xa2, 0x1a, 0xa4,
	0x0e, 0x8d, 0x63, 0x3a, 0x20, 0x73, 0xb2, 0x65, 0x17, 0x4d, 0x39, 0x54, 0xcc, 0x5f, 0x53, 0xa2,
	0x5d, 0xce, 0xdb, 0xd6, 0xd6, 0x20, 0x6d, 0xe5, 0x69, 0x3b, 0xe5, 0xb3, 0xaf, 0x4d, 0xb5, 0x7d,
	0x3c, 0xbc, 0xd4, 0x95, 0x8b, 0x4b, 0x5d, 0x39, 0x1b, 0xe9, 0xca, 0x70, 0xa4, 0xab, 0xe7, 0x23,
	0x5d, 0xfd, 0x3e, 0xd2, 0xd5, 0x4f, 0x57, 0xba, 0x72, 0x7e, 0xa5, 0x2b, 0x17, 0x57, 0xba, 0xf2,
	0x61, 0xf3, 0xaf, 0x27, 0x48, 0xa7, 0xfd, 0x79, 0xe1, 0x4e, 0x55, 0x4e, 0xaa, 0xad, 0x9f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x20, 0x38, 0xe9, 0x79, 0xf6, 0x04, 0x00, 0x00,
}

func (m *TxOutItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultPubKeyEddsa) > 0 {
		i -= len(m.VaultPubKeyEddsa)
		copy(dAtA[i:], m.VaultPubKeyEddsa)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.VaultPubKeyEddsa)))
		i--
		dAtA[i] = 0x7a
	}
	if m.CloutSpent != nil {
		{
			size := m.CloutSpent.Size()
			i -= size
			if _, err := m.CloutSpent.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypeTxOut(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.AggregatorTargetLimit != nil {
		{
			size := m.AggregatorTargetLimit.Size()
			i -= size
			if _, err := m.AggregatorTargetLimit.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypeTxOut(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AggregatorTargetAsset) > 0 {
		i -= len(m.AggregatorTargetAsset)
		copy(dAtA[i:], m.AggregatorTargetAsset)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.AggregatorTargetAsset)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Aggregator) > 0 {
		i -= len(m.Aggregator)
		copy(dAtA[i:], m.Aggregator)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.Aggregator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OutHash) > 0 {
		i -= len(m.OutHash)
		copy(dAtA[i:], m.OutHash)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.OutHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.InHash) > 0 {
		i -= len(m.InHash)
		copy(dAtA[i:], m.InHash)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.InHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.GasRate != 0 {
		i = encodeVarintTypeTxOut(dAtA, i, uint64(m.GasRate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MaxGas) > 0 {
		for iNdEx := len(m.MaxGas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxGas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeTxOut(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeTxOut(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.VaultPubKey) > 0 {
		i -= len(m.VaultPubKey)
		copy(dAtA[i:], m.VaultPubKey)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.VaultPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypeTxOut(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxArray) > 0 {
		for iNdEx := len(m.TxArray) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxArray[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeTxOut(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintTypeTxOut(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeTxOut(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeTxOut(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxOutItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.VaultPubKey)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTypeTxOut(uint64(l))
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	if len(m.MaxGas) > 0 {
		for _, e := range m.MaxGas {
			l = e.Size()
			n += 1 + l + sovTypeTxOut(uint64(l))
		}
	}
	if m.GasRate != 0 {
		n += 1 + sovTypeTxOut(uint64(m.GasRate))
	}
	l = len(m.InHash)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.OutHash)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.Aggregator)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.AggregatorTargetAsset)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	if m.AggregatorTargetLimit != nil {
		l = m.AggregatorTargetLimit.Size()
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	if m.CloutSpent != nil {
		l = m.CloutSpent.Size()
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	l = len(m.VaultPubKeyEddsa)
	if l > 0 {
		n += 1 + l + sovTypeTxOut(uint64(l))
	}
	return n
}

func (m *TxOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypeTxOut(uint64(m.Height))
	}
	if len(m.TxArray) > 0 {
		for _, e := range m.TxArray {
			l = e.Size()
			n += 1 + l + sovTypeTxOut(uint64(l))
		}
	}
	return n
}

func sovTypeTxOut(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeTxOut(x uint64) (n int) {
	return sovTypeTxOut(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TxOut) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTxArray := "[]TxOutItem{"
	for _, f := range this.TxArray {
		repeatedStringForTxArray += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForTxArray += "}"
	s := strings.Join([]string{`&TxOut{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`TxArray:` + repeatedStringForTxArray + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypeTxOut(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TxOutItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = gitlab_com_thorchain_thornode_v3_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = gitlab_com_thorchain_thornode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultPubKey = gitlab_com_thorchain_thornode_v3_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxGas = append(m.MaxGas, common.Coin{})
			if err := m.MaxGas[len(m.MaxGas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRate", wireType)
			}
			m.GasRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InHash = gitlab_com_thorchain_thornode_v3_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHash = gitlab_com_thorchain_thornode_v3_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorTargetAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Uint
			m.AggregatorTargetLimit = &v
			if err := m.AggregatorTargetLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloutSpent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Uint
			m.CloutSpent = &v
			if err := m.CloutSpent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultPubKeyEddsa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultPubKeyEddsa = gitlab_com_thorchain_thornode_v3_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxArray = append(m.TxArray, TxOutItem{})
			if err := m.TxArray[len(m.TxArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeTxOut(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeTxOut
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTxOut
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeTxOut
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeTxOut
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeTxOut
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeTxOut        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeTxOut          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeTxOut = fmt.Errorf("proto: unexpected end of group")
)
