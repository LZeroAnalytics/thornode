// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_upgrade.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryUpgradeProposalRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryUpgradeProposalRequest) Reset()         { *m = QueryUpgradeProposalRequest{} }
func (m *QueryUpgradeProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUpgradeProposalRequest) ProtoMessage()    {}
func (*QueryUpgradeProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{0}
}
func (m *QueryUpgradeProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpgradeProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpgradeProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpgradeProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpgradeProposalRequest.Merge(m, src)
}
func (m *QueryUpgradeProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpgradeProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpgradeProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpgradeProposalRequest proto.InternalMessageInfo

func (m *QueryUpgradeProposalRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryUpgradeProposalRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryUpgradeProposalResponse struct {
	// the name of the upgrade
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// the block height at which the upgrade will occur
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height"`
	// the description of the upgrade, typically json with URLs to binaries for use with automation tools
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info"`
	// whether the upgrade has been approved by the active validators
	Approved bool `protobuf:"varint,4,opt,name=approved,proto3" json:"approved"`
	// the percentage of active validators that have approved the upgrade
	ApprovedPercent string `protobuf:"bytes,5,opt,name=approved_percent,json=approvedPercent,proto3" json:"approved_percent,omitempty"`
	// the amount of additional active validators required to reach quorum for the upgrade
	ValidatorsToQuorum int64 `protobuf:"varint,6,opt,name=validators_to_quorum,json=validatorsToQuorum,proto3" json:"validators_to_quorum"`
}

func (m *QueryUpgradeProposalResponse) Reset()         { *m = QueryUpgradeProposalResponse{} }
func (m *QueryUpgradeProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUpgradeProposalResponse) ProtoMessage()    {}
func (*QueryUpgradeProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{1}
}
func (m *QueryUpgradeProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpgradeProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpgradeProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpgradeProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpgradeProposalResponse.Merge(m, src)
}
func (m *QueryUpgradeProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpgradeProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpgradeProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpgradeProposalResponse proto.InternalMessageInfo

func (m *QueryUpgradeProposalResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryUpgradeProposalResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryUpgradeProposalResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *QueryUpgradeProposalResponse) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

func (m *QueryUpgradeProposalResponse) GetApprovedPercent() string {
	if m != nil {
		return m.ApprovedPercent
	}
	return ""
}

func (m *QueryUpgradeProposalResponse) GetValidatorsToQuorum() int64 {
	if m != nil {
		return m.ValidatorsToQuorum
	}
	return 0
}

type QueryUpgradeProposalsRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryUpgradeProposalsRequest) Reset()         { *m = QueryUpgradeProposalsRequest{} }
func (m *QueryUpgradeProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUpgradeProposalsRequest) ProtoMessage()    {}
func (*QueryUpgradeProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{2}
}
func (m *QueryUpgradeProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpgradeProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpgradeProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpgradeProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpgradeProposalsRequest.Merge(m, src)
}
func (m *QueryUpgradeProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpgradeProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpgradeProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpgradeProposalsRequest proto.InternalMessageInfo

func (m *QueryUpgradeProposalsRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryUpgradeProposalsResponse struct {
	UpgradeProposals []*QueryUpgradeProposalResponse `protobuf:"bytes,1,rep,name=upgrade_proposals,json=upgradeProposals,proto3" json:"upgrade_proposals,omitempty"`
}

func (m *QueryUpgradeProposalsResponse) Reset()         { *m = QueryUpgradeProposalsResponse{} }
func (m *QueryUpgradeProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUpgradeProposalsResponse) ProtoMessage()    {}
func (*QueryUpgradeProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{3}
}
func (m *QueryUpgradeProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpgradeProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpgradeProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpgradeProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpgradeProposalsResponse.Merge(m, src)
}
func (m *QueryUpgradeProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpgradeProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpgradeProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpgradeProposalsResponse proto.InternalMessageInfo

func (m *QueryUpgradeProposalsResponse) GetUpgradeProposals() []*QueryUpgradeProposalResponse {
	if m != nil {
		return m.UpgradeProposals
	}
	return nil
}

type QueryUpgradeVotesRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryUpgradeVotesRequest) Reset()         { *m = QueryUpgradeVotesRequest{} }
func (m *QueryUpgradeVotesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUpgradeVotesRequest) ProtoMessage()    {}
func (*QueryUpgradeVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{4}
}
func (m *QueryUpgradeVotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpgradeVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpgradeVotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpgradeVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpgradeVotesRequest.Merge(m, src)
}
func (m *QueryUpgradeVotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpgradeVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpgradeVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpgradeVotesRequest proto.InternalMessageInfo

func (m *QueryUpgradeVotesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryUpgradeVotesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type UpgradeVote struct {
	NodeAddress string `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address"`
	Vote        string `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote"`
}

func (m *UpgradeVote) Reset()         { *m = UpgradeVote{} }
func (m *UpgradeVote) String() string { return proto.CompactTextString(m) }
func (*UpgradeVote) ProtoMessage()    {}
func (*UpgradeVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{5}
}
func (m *UpgradeVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeVote.Merge(m, src)
}
func (m *UpgradeVote) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeVote) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeVote.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeVote proto.InternalMessageInfo

func (m *UpgradeVote) GetNodeAddress() string {
	if m != nil {
		return m.NodeAddress
	}
	return ""
}

func (m *UpgradeVote) GetVote() string {
	if m != nil {
		return m.Vote
	}
	return ""
}

type QueryUpgradeVotesResponse struct {
	UpgradeVotes []*UpgradeVote `protobuf:"bytes,1,rep,name=upgrade_votes,json=upgradeVotes,proto3" json:"upgrade_votes,omitempty"`
}

func (m *QueryUpgradeVotesResponse) Reset()         { *m = QueryUpgradeVotesResponse{} }
func (m *QueryUpgradeVotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUpgradeVotesResponse) ProtoMessage()    {}
func (*QueryUpgradeVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_693d9dc03535ace3, []int{6}
}
func (m *QueryUpgradeVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUpgradeVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUpgradeVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUpgradeVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpgradeVotesResponse.Merge(m, src)
}
func (m *QueryUpgradeVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUpgradeVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpgradeVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpgradeVotesResponse proto.InternalMessageInfo

func (m *QueryUpgradeVotesResponse) GetUpgradeVotes() []*UpgradeVote {
	if m != nil {
		return m.UpgradeVotes
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryUpgradeProposalRequest)(nil), "types.QueryUpgradeProposalRequest")
	proto.RegisterType((*QueryUpgradeProposalResponse)(nil), "types.QueryUpgradeProposalResponse")
	proto.RegisterType((*QueryUpgradeProposalsRequest)(nil), "types.QueryUpgradeProposalsRequest")
	proto.RegisterType((*QueryUpgradeProposalsResponse)(nil), "types.QueryUpgradeProposalsResponse")
	proto.RegisterType((*QueryUpgradeVotesRequest)(nil), "types.QueryUpgradeVotesRequest")
	proto.RegisterType((*UpgradeVote)(nil), "types.UpgradeVote")
	proto.RegisterType((*QueryUpgradeVotesResponse)(nil), "types.QueryUpgradeVotesResponse")
}

func init() { proto.RegisterFile("types/query_upgrade.proto", fileDescriptor_693d9dc03535ace3) }

var fileDescriptor_693d9dc03535ace3 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xd6, 0xad, 0x2a, 0x6e, 0x11, 0xc5, 0x9a, 0x90, 0x07, 0x23, 0xa9, 0xc2, 0xa5, 0x5c,
	0x1a, 0x89, 0x49, 0x70, 0xa6, 0x07, 0xa4, 0x71, 0xea, 0xac, 0xc1, 0x81, 0x4b, 0xf0, 0x1a, 0x93,
	0x46, 0x6a, 0xf3, 0x5c, 0xdb, 0xa9, 0xd8, 0xbf, 0xe0, 0x1f, 0xf0, 0x77, 0x38, 0xee, 0xc8, 0x29,
	0x42, 0xed, 0x2d, 0xbf, 0x02, 0xd9, 0x49, 0xd6, 0x14, 0x15, 0x0e, 0x5c, 0xac, 0xf7, 0x7d, 0xaf,
	0xef, 0xf3, 0xeb, 0xf7, 0x39, 0xe8, 0x4c, 0xdf, 0x0a, 0xae, 0x82, 0x55, 0xc6, 0xe5, 0x6d, 0x98,
	0x89, 0x58, 0xb2, 0x88, 0x8f, 0x85, 0x04, 0x0d, 0xf8, 0xc4, 0xb6, 0x9e, 0x9e, 0xc6, 0x10, 0x83,
	0x65, 0x02, 0x53, 0x95, 0x4d, 0xff, 0x12, 0x3d, 0xbb, 0x32, 0x33, 0x1f, 0xca, 0x91, 0xa9, 0x04,
	0x01, 0x8a, 0x2d, 0x28, 0x5f, 0x65, 0x5c, 0x69, 0x8c, 0xd1, 0x71, 0xca, 0x96, 0x9c, 0x38, 0x43,
	0x67, 0xf4, 0x80, 0xda, 0x1a, 0x3f, 0x41, 0x9d, 0x39, 0x4f, 0xe2, 0xb9, 0x26, 0x47, 0x96, 0xad,
	0x90, 0xff, 0xfd, 0x08, 0x9d, 0x1f, 0xd6, 0x52, 0x02, 0x52, 0xc5, 0xf1, 0x79, 0x53, 0x6c, 0xd2,
	0x2d, 0x72, 0xcf, 0xe2, 0x4a, 0xd6, 0xdf, 0x93, 0x6d, 0x4f, 0x50, 0x91, 0x7b, 0x15, 0x53, 0x5f,
	0x61, 0x14, 0x92, 0xf4, 0x0b, 0x90, 0xf6, 0x4e, 0xc1, 0x60, 0x6a, 0x4f, 0x3c, 0x42, 0x5d, 0x26,
	0x84, 0x84, 0x35, 0x8f, 0xc8, 0xf1, 0xd0, 0x19, 0x75, 0x27, 0xfd, 0x22, 0xf7, 0xee, 0x39, 0x7a,
	0x5f, 0xe1, 0x97, 0x68, 0x50, 0xd7, 0xa1, 0xe0, 0x72, 0xc6, 0x53, 0x4d, 0x4e, 0xec, 0x9f, 0x79,
	0x54, 0xf3, 0xd3, 0x92, 0xc6, 0xef, 0xd1, 0xe9, 0x9a, 0x2d, 0x92, 0x88, 0x69, 0x90, 0x2a, 0xd4,
	0x10, 0xae, 0x32, 0x90, 0xd9, 0x92, 0x74, 0xec, 0x92, 0xa4, 0xc8, 0xbd, 0x83, 0x7d, 0x8a, 0x77,
	0xec, 0x35, 0x5c, 0x59, 0xce, 0x7f, 0x7d, 0xd8, 0x20, 0x55, 0xbb, 0xbd, 0x73, 0xd6, 0xd9, 0x73,
	0x76, 0x85, 0x9e, 0xff, 0x65, 0xae, 0x72, 0x76, 0x8a, 0x1e, 0x57, 0x99, 0x87, 0xa2, 0x6e, 0x12,
	0x67, 0xd8, 0x1e, 0xf5, 0x5e, 0xbd, 0x18, 0xdb, 0xf8, 0xc7, 0xff, 0x4a, 0x86, 0x0e, 0xb2, 0x3f,
	0x94, 0xfd, 0x77, 0x88, 0x34, 0x27, 0x3e, 0x82, 0xe6, 0xea, 0x7f, 0x1e, 0xc5, 0x67, 0xd4, 0x6b,
	0x48, 0xe0, 0x0b, 0xd4, 0x4f, 0x21, 0xe2, 0x21, 0x8b, 0x22, 0xc9, 0x95, 0xaa, 0x9e, 0xc2, 0xa0,
	0xc8, 0xbd, 0x3d, 0x9e, 0xf6, 0x0c, 0x7a, 0x5b, 0x02, 0x93, 0xfa, 0x1a, 0x34, 0x2f, 0x95, 0xcb,
	0xd4, 0x0d, 0xa6, 0xf6, 0xf4, 0xaf, 0xd1, 0xd9, 0x81, 0x4d, 0x2b, 0x63, 0xde, 0xa0, 0x87, 0xb5,
	0x31, 0xe6, 0xc7, 0xb5, 0x29, 0xb8, 0x32, 0xa5, 0x31, 0x43, 0xfb, 0x59, 0x43, 0x60, 0x72, 0xf9,
	0x63, 0xe3, 0x3a, 0x77, 0x1b, 0xd7, 0xf9, 0xb5, 0x71, 0x9d, 0x6f, 0x5b, 0xb7, 0x75, 0xb7, 0x75,
	0x5b, 0x3f, 0xb7, 0x6e, 0xeb, 0x53, 0x10, 0x27, 0x7a, 0xc1, 0x6e, 0xc6, 0x33, 0x58, 0x06, 0x7a,
	0x0e, 0x72, 0x36, 0x67, 0x49, 0x6a, 0x2b, 0xb3, 0x73, 0xf0, 0xb5, 0x49, 0x9a, 0x4b, 0x6e, 0x3a,
	0xf6, 0x4b, 0xbb, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x67, 0xd4, 0x75, 0xc1, 0xa3, 0x03, 0x00,
	0x00,
}

func (m *QueryUpgradeProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpgradeProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpgradeProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUpgradeProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpgradeProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpgradeProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorsToQuorum != 0 {
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(m.ValidatorsToQuorum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ApprovedPercent) > 0 {
		i -= len(m.ApprovedPercent)
		copy(dAtA[i:], m.ApprovedPercent)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.ApprovedPercent)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUpgradeProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpgradeProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpgradeProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUpgradeProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpgradeProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpgradeProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpgradeProposals) > 0 {
		for iNdEx := len(m.UpgradeProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpgradeProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryUpgrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUpgradeVotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpgradeVotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpgradeVotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vote) > 0 {
		i -= len(m.Vote)
		copy(dAtA[i:], m.Vote)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.Vote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintQueryUpgrade(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUpgradeVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUpgradeVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUpgradeVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpgradeVotes) > 0 {
		for iNdEx := len(m.UpgradeVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpgradeVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryUpgrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryUpgradeProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	return n
}

func (m *QueryUpgradeProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQueryUpgrade(uint64(m.Height))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	if m.Approved {
		n += 2
	}
	l = len(m.ApprovedPercent)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	if m.ValidatorsToQuorum != 0 {
		n += 1 + sovQueryUpgrade(uint64(m.ValidatorsToQuorum))
	}
	return n
}

func (m *QueryUpgradeProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	return n
}

func (m *QueryUpgradeProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpgradeProposals) > 0 {
		for _, e := range m.UpgradeProposals {
			l = e.Size()
			n += 1 + l + sovQueryUpgrade(uint64(l))
		}
	}
	return n
}

func (m *QueryUpgradeVotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	return n
}

func (m *UpgradeVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	l = len(m.Vote)
	if l > 0 {
		n += 1 + l + sovQueryUpgrade(uint64(l))
	}
	return n
}

func (m *QueryUpgradeVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpgradeVotes) > 0 {
		for _, e := range m.UpgradeVotes {
			l = e.Size()
			n += 1 + l + sovQueryUpgrade(uint64(l))
		}
	}
	return n
}

func sovQueryUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryUpgrade(x uint64) (n int) {
	return sovQueryUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryUpgradeProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpgradeProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpgradeProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpgradeProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpgradeProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpgradeProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedPercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsToQuorum", wireType)
			}
			m.ValidatorsToQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsToQuorum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpgradeProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpgradeProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpgradeProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpgradeProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpgradeProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpgradeProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeProposals = append(m.UpgradeProposals, &QueryUpgradeProposalResponse{})
			if err := m.UpgradeProposals[len(m.UpgradeProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpgradeVotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpgradeVotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpgradeVotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUpgradeVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUpgradeVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUpgradeVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeVotes = append(m.UpgradeVotes, &UpgradeVote{})
			if err := m.UpgradeVotes[len(m.UpgradeVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryUpgrade = fmt.Errorf("proto: unexpected end of group")
)
