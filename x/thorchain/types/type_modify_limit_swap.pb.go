// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_modify_limit_swap.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/v3/common"
	gitlab_com_thorchain_thornode_v3_common "gitlab.com/thorchain/thornode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ModifyLimitSwap struct {
	From                 gitlab_com_thorchain_thornode_v3_common.Address `protobuf:"bytes,1,opt,name=from,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Address" json:"from,omitempty"`
	Source               common.Coin                                     `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	Target               common.Coin                                     `protobuf:"bytes,3,opt,name=target,proto3" json:"target"`
	ModifiedTargetAmount cosmossdk_io_math.Uint                          `protobuf:"bytes,4,opt,name=modified_target_amount,json=modifiedTargetAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"modified_target_amount"`
}

func (m *ModifyLimitSwap) Reset()         { *m = ModifyLimitSwap{} }
func (m *ModifyLimitSwap) String() string { return proto.CompactTextString(m) }
func (*ModifyLimitSwap) ProtoMessage()    {}
func (*ModifyLimitSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_62abbec7671091fa, []int{0}
}
func (m *ModifyLimitSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyLimitSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyLimitSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyLimitSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyLimitSwap.Merge(m, src)
}
func (m *ModifyLimitSwap) XXX_Size() int {
	return m.Size()
}
func (m *ModifyLimitSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyLimitSwap.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyLimitSwap proto.InternalMessageInfo

func (m *ModifyLimitSwap) GetFrom() gitlab_com_thorchain_thornode_v3_common.Address {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ModifyLimitSwap) GetSource() common.Coin {
	if m != nil {
		return m.Source
	}
	return common.Coin{}
}

func (m *ModifyLimitSwap) GetTarget() common.Coin {
	if m != nil {
		return m.Target
	}
	return common.Coin{}
}

func init() {
	proto.RegisterType((*ModifyLimitSwap)(nil), "types.ModifyLimitSwap")
}

func init() {
	proto.RegisterFile("types/type_modify_limit_swap.proto", fileDescriptor_62abbec7671091fa)
}

var fileDescriptor_62abbec7671091fa = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4f, 0x32, 0x31,
	0x1c, 0xc6, 0xaf, 0xbc, 0xbc, 0x24, 0x9e, 0x26, 0x26, 0x27, 0x21, 0x17, 0x86, 0x42, 0x98, 0x88,
	0xc3, 0x35, 0x81, 0x4f, 0x00, 0x0e, 0x2e, 0xb8, 0x20, 0x2e, 0x2e, 0x97, 0x72, 0x2d, 0x47, 0x23,
	0xed, 0xff, 0xd2, 0x16, 0x91, 0x6f, 0xe0, 0xe8, 0xc7, 0x62, 0x64, 0x34, 0x0e, 0xc4, 0xc0, 0xb7,
	0x70, 0x32, 0xed, 0x41, 0xe2, 0x62, 0x5c, 0xee, 0x9e, 0x3c, 0xfd, 0x3d, 0x4f, 0xdb, 0x7f, 0xc3,
	0x8e, 0x5d, 0x17, 0xdc, 0x10, 0xf7, 0x4d, 0x25, 0x30, 0x31, 0x5b, 0xa7, 0x0b, 0x21, 0x85, 0x4d,
	0xcd, 0x8a, 0x16, 0x49, 0xa1, 0xc1, 0x42, 0xf4, 0xdf, 0x33, 0xcd, 0xab, 0x0c, 0xa4, 0x04, 0x45,
	0xca, 0x5f, 0xb9, 0xd6, 0xac, 0xe7, 0x90, 0x83, 0x97, 0xc4, 0xa9, 0xd2, 0xed, 0xbc, 0x56, 0xc2,
	0xcb, 0x3b, 0xdf, 0x36, 0x72, 0x65, 0xf7, 0x2b, 0x5a, 0x44, 0xb7, 0x61, 0x75, 0xa6, 0x41, 0xc6,
	0xa8, 0x8d, 0xba, 0x67, 0xc3, 0xfe, 0xd7, 0xae, 0x45, 0x72, 0x61, 0x17, 0x74, 0x9a, 0x64, 0x20,
	0x89, 0x9d, 0x83, 0xce, 0xe6, 0x54, 0x28, 0xaf, 0x14, 0x30, 0x4e, 0x9e, 0xfb, 0xa7, 0xad, 0x06,
	0x8c, 0x69, 0x6e, 0xcc, 0xd8, 0x17, 0x44, 0xd7, 0x61, 0xcd, 0xc0, 0x52, 0x67, 0x3c, 0xae, 0xb4,
	0x51, 0xf7, 0xbc, 0x77, 0x91, 0x1c, 0xb1, 0x1b, 0x10, 0x6a, 0x58, 0xdd, 0xec, 0x5a, 0xc1, 0xf8,
	0x48, 0x38, 0xd6, 0x52, 0x9d, 0x73, 0x1b, 0xff, 0xfb, 0x9d, 0x2d, 0x89, 0x68, 0x12, 0x36, 0xfc,
	0x04, 0x04, 0x67, 0x69, 0x69, 0xa5, 0x54, 0xc2, 0x52, 0xd9, 0xb8, 0xea, 0x8f, 0x8c, 0x1d, 0xfd,
	0xb1, 0x6b, 0x35, 0x32, 0x30, 0x12, 0x8c, 0x61, 0x4f, 0x89, 0x00, 0x22, 0xa9, 0x9d, 0x27, 0x0f,
	0x42, 0xd9, 0x71, 0xfd, 0x94, 0x9e, 0xf8, 0xf0, 0xc0, 0x67, 0x87, 0xa3, 0xcd, 0x1e, 0xa3, 0xed,
	0x1e, 0xa3, 0xcf, 0x3d, 0x46, 0x6f, 0x07, 0x1c, 0x6c, 0x0f, 0x38, 0x78, 0x3f, 0xe0, 0xe0, 0xb1,
	0xf7, 0xe7, 0xf5, 0x5f, 0x7e, 0xfa, 0xee, 0x0d, 0xa6, 0x35, 0x3f, 0xdf, 0xfe, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xd7, 0x36, 0x53, 0x40, 0xb7, 0x01, 0x00, 0x00,
}

func (m *ModifyLimitSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyLimitSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyLimitSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ModifiedTargetAmount.Size()
		i -= size
		if _, err := m.ModifiedTargetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeModifyLimitSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeModifyLimitSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeModifyLimitSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTypeModifyLimitSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeModifyLimitSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeModifyLimitSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ModifyLimitSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTypeModifyLimitSwap(uint64(l))
	}
	l = m.Source.Size()
	n += 1 + l + sovTypeModifyLimitSwap(uint64(l))
	l = m.Target.Size()
	n += 1 + l + sovTypeModifyLimitSwap(uint64(l))
	l = m.ModifiedTargetAmount.Size()
	n += 1 + l + sovTypeModifyLimitSwap(uint64(l))
	return n
}

func sovTypeModifyLimitSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeModifyLimitSwap(x uint64) (n int) {
	return sovTypeModifyLimitSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModifyLimitSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeModifyLimitSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyLimitSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyLimitSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = gitlab_com_thorchain_thornode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTargetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModifiedTargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeModifyLimitSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeModifyLimitSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeModifyLimitSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeModifyLimitSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeModifyLimitSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeModifyLimitSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeModifyLimitSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeModifyLimitSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeModifyLimitSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeModifyLimitSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeModifyLimitSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeModifyLimitSwap = fmt.Errorf("proto: unexpected end of group")
)
