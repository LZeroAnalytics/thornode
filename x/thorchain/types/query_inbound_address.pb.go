// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_inbound_address.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryInboundAddressResponse struct {
	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	PubKey  string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Router  string `protobuf:"bytes,4,opt,name=router,proto3" json:"router,omitempty"`
	// Returns true if trading is unavailable for this chain, either because trading is halted globally or specifically for this chain
	Halted bool `protobuf:"varint,5,opt,name=halted,proto3" json:"halted"`
	// Returns true if trading is paused globally
	GlobalTradingPaused bool `protobuf:"varint,6,opt,name=global_trading_paused,json=globalTradingPaused,proto3" json:"global_trading_paused"`
	// Returns true if trading is paused for this chain
	ChainTradingPaused bool `protobuf:"varint,7,opt,name=chain_trading_paused,json=chainTradingPaused,proto3" json:"chain_trading_paused"`
	// Returns true if LP actions are paused for this chain
	ChainLpActionsPaused bool `protobuf:"varint,8,opt,name=chain_lp_actions_paused,json=chainLpActionsPaused,proto3" json:"chain_lp_actions_paused"`
	// The minimum fee rate used by vaults to send outbound TXs. The actual fee rate may be higher. For EVM chains this is returned in gwei (1e9).
	GasRate string `protobuf:"bytes,9,opt,name=gas_rate,json=gasRate,proto3" json:"gas_rate,omitempty"`
	// Units of the gas_rate.
	GasRateUnits string `protobuf:"bytes,10,opt,name=gas_rate_units,json=gasRateUnits,proto3" json:"gas_rate_units,omitempty"`
	// Avg size of outbound TXs on each chain. For UTXO chains it may be larger than average, as it takes into account vault consolidation txs, which can have many vouts
	OutboundTxSize string `protobuf:"bytes,11,opt,name=outbound_tx_size,json=outboundTxSize,proto3" json:"outbound_tx_size,omitempty"`
	// The total outbound fee charged to the user for outbound txs in the gas asset of the chain.
	OutboundFee string `protobuf:"bytes,12,opt,name=outbound_fee,json=outboundFee,proto3" json:"outbound_fee,omitempty"`
	// Defines the minimum transaction size for the chain in base units (sats, wei, uatom). Transactions with asset amounts lower than the dust_threshold are ignored.
	DustThreshold string `protobuf:"bytes,13,opt,name=dust_threshold,json=dustThreshold,proto3" json:"dust_threshold,omitempty"`
}

func (m *QueryInboundAddressResponse) Reset()         { *m = QueryInboundAddressResponse{} }
func (m *QueryInboundAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInboundAddressResponse) ProtoMessage()    {}
func (*QueryInboundAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd4cb06f1e5d4e87, []int{0}
}
func (m *QueryInboundAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboundAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboundAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboundAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboundAddressResponse.Merge(m, src)
}
func (m *QueryInboundAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboundAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboundAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboundAddressResponse proto.InternalMessageInfo

func (m *QueryInboundAddressResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetHalted() bool {
	if m != nil {
		return m.Halted
	}
	return false
}

func (m *QueryInboundAddressResponse) GetGlobalTradingPaused() bool {
	if m != nil {
		return m.GlobalTradingPaused
	}
	return false
}

func (m *QueryInboundAddressResponse) GetChainTradingPaused() bool {
	if m != nil {
		return m.ChainTradingPaused
	}
	return false
}

func (m *QueryInboundAddressResponse) GetChainLpActionsPaused() bool {
	if m != nil {
		return m.ChainLpActionsPaused
	}
	return false
}

func (m *QueryInboundAddressResponse) GetGasRate() string {
	if m != nil {
		return m.GasRate
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetGasRateUnits() string {
	if m != nil {
		return m.GasRateUnits
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetOutboundTxSize() string {
	if m != nil {
		return m.OutboundTxSize
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetOutboundFee() string {
	if m != nil {
		return m.OutboundFee
	}
	return ""
}

func (m *QueryInboundAddressResponse) GetDustThreshold() string {
	if m != nil {
		return m.DustThreshold
	}
	return ""
}

type QueryInboundAddressesRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryInboundAddressesRequest) Reset()         { *m = QueryInboundAddressesRequest{} }
func (m *QueryInboundAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInboundAddressesRequest) ProtoMessage()    {}
func (*QueryInboundAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd4cb06f1e5d4e87, []int{1}
}
func (m *QueryInboundAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboundAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboundAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboundAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboundAddressesRequest.Merge(m, src)
}
func (m *QueryInboundAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboundAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboundAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboundAddressesRequest proto.InternalMessageInfo

func (m *QueryInboundAddressesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryInboundAddressesResponse struct {
	InboundAddresses []*QueryInboundAddressResponse `protobuf:"bytes,1,rep,name=inbound_addresses,json=inboundAddresses,proto3" json:"inbound_addresses,omitempty"`
}

func (m *QueryInboundAddressesResponse) Reset()         { *m = QueryInboundAddressesResponse{} }
func (m *QueryInboundAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInboundAddressesResponse) ProtoMessage()    {}
func (*QueryInboundAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd4cb06f1e5d4e87, []int{2}
}
func (m *QueryInboundAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboundAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboundAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboundAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboundAddressesResponse.Merge(m, src)
}
func (m *QueryInboundAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboundAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboundAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboundAddressesResponse proto.InternalMessageInfo

func (m *QueryInboundAddressesResponse) GetInboundAddresses() []*QueryInboundAddressResponse {
	if m != nil {
		return m.InboundAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryInboundAddressResponse)(nil), "types.QueryInboundAddressResponse")
	proto.RegisterType((*QueryInboundAddressesRequest)(nil), "types.QueryInboundAddressesRequest")
	proto.RegisterType((*QueryInboundAddressesResponse)(nil), "types.QueryInboundAddressesResponse")
}

func init() { proto.RegisterFile("types/query_inbound_address.proto", fileDescriptor_cd4cb06f1e5d4e87) }

var fileDescriptor_cd4cb06f1e5d4e87 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0xda, 0xfc, 0xe9, 0x24, 0x8d, 0xca, 0x12, 0xe8, 0x96, 0x82, 0x93, 0x46, 0x20,
	0xe5, 0x14, 0x4b, 0xad, 0xc4, 0xbd, 0x3d, 0x20, 0x01, 0x45, 0x80, 0x09, 0x17, 0x2e, 0xd6, 0x3a,
	0x1e, 0x6c, 0x0b, 0xe3, 0x75, 0xbd, 0xbb, 0x28, 0xe9, 0x53, 0xf0, 0x54, 0x88, 0x63, 0x8f, 0x9c,
	0x22, 0x94, 0xdc, 0xf2, 0x14, 0xc8, 0xbb, 0x36, 0x82, 0x28, 0xe5, 0xe4, 0x9d, 0xdf, 0x7c, 0xf3,
	0x8d, 0xec, 0xfd, 0x0c, 0x27, 0x72, 0x9e, 0xa1, 0x70, 0xae, 0x14, 0xe6, 0x73, 0x2f, 0x4e, 0x7d,
	0xae, 0xd2, 0xc0, 0x63, 0x41, 0x90, 0xa3, 0x10, 0xe3, 0x2c, 0xe7, 0x92, 0x93, 0xba, 0x96, 0x3c,
	0xec, 0x85, 0x3c, 0xe4, 0x9a, 0x38, 0xc5, 0xc9, 0x34, 0x87, 0xdf, 0x77, 0xe1, 0xf8, 0x5d, 0x31,
	0xfc, 0xc2, 0xcc, 0x9e, 0x9b, 0x51, 0x17, 0x45, 0xc6, 0x53, 0x81, 0xa4, 0x07, 0xf5, 0x69, 0xc4,
	0xe2, 0x94, 0x5a, 0x03, 0x6b, 0xb4, 0xe7, 0x9a, 0x82, 0x1c, 0x42, 0x33, 0x53, 0xbe, 0xf7, 0x19,
	0xe7, 0xf4, 0x8e, 0xe6, 0x8d, 0x4c, 0xf9, 0xaf, 0x70, 0x4e, 0x28, 0x34, 0xcb, 0xe5, 0x74, 0x47,
	0x37, 0xaa, 0x92, 0x3c, 0x80, 0x46, 0xce, 0x95, 0xc4, 0x9c, 0xee, 0x9a, 0x09, 0x53, 0x91, 0x21,
	0x34, 0x22, 0x96, 0x48, 0x0c, 0x68, 0x7d, 0x60, 0x8d, 0x5a, 0x17, 0xb0, 0x5e, 0xf4, 0x4b, 0xe2,
	0x96, 0x4f, 0xf2, 0x1a, 0xee, 0x87, 0x09, 0xf7, 0x59, 0xe2, 0xc9, 0x9c, 0x05, 0x71, 0x1a, 0x7a,
	0x19, 0x53, 0x02, 0x03, 0xda, 0xd0, 0x23, 0x47, 0xeb, 0x45, 0x7f, 0xbb, 0xc0, 0xbd, 0x67, 0xf0,
	0xc4, 0xd0, 0xb7, 0x1a, 0x92, 0x97, 0xd0, 0xd3, 0xaf, 0xb1, 0xe9, 0xd6, 0xd4, 0x6e, 0x74, 0xbd,
	0xe8, 0x6f, 0xed, 0xbb, 0x44, 0xd3, 0x7f, 0xbd, 0x5c, 0x38, 0x34, 0xda, 0x24, 0xf3, 0xd8, 0x54,
	0xc6, 0x3c, 0x15, 0x95, 0x5d, 0x4b, 0xdb, 0x1d, 0xaf, 0x17, 0xfd, 0xdb, 0x24, 0xae, 0xd9, 0x73,
	0x99, 0x9d, 0x1b, 0x5c, 0x7a, 0x1e, 0x41, 0x2b, 0x64, 0xc2, 0xcb, 0x99, 0x44, 0xba, 0x67, 0xbe,
	0x62, 0xc8, 0x84, 0xcb, 0x24, 0x92, 0x27, 0xd0, 0xad, 0x5a, 0x9e, 0x4a, 0x63, 0x29, 0x28, 0x68,
	0x41, 0xa7, 0x14, 0x7c, 0x28, 0x18, 0x19, 0xc1, 0x01, 0x57, 0xd2, 0x64, 0x41, 0xce, 0x3c, 0x11,
	0x5f, 0x23, 0x6d, 0x6b, 0x5d, 0xb7, 0xe2, 0x93, 0xd9, 0xfb, 0xf8, 0x1a, 0xc9, 0x09, 0x74, 0xfe,
	0x28, 0x3f, 0x21, 0xd2, 0x8e, 0x56, 0xb5, 0x2b, 0xf6, 0x1c, 0x91, 0x3c, 0x85, 0x6e, 0xa0, 0x84,
	0xf4, 0x64, 0x94, 0xa3, 0x88, 0x78, 0x12, 0xd0, 0x7d, 0x2d, 0xda, 0x2f, 0xe8, 0xa4, 0x82, 0xc3,
	0x67, 0xf0, 0x68, 0x4b, 0x8e, 0x50, 0xb8, 0x78, 0xa5, 0x50, 0xc8, 0xe2, 0xfe, 0x23, 0x8c, 0xc3,
	0x48, 0x96, 0x49, 0x2a, 0xab, 0x61, 0x06, 0x8f, 0x6f, 0x99, 0x2b, 0x13, 0xf8, 0x06, 0xee, 0x6e,
	0xe4, 0x1a, 0x05, 0xb5, 0x06, 0x3b, 0xa3, 0xf6, 0xe9, 0x70, 0xac, 0xa3, 0x3d, 0xfe, 0x4f, 0x80,
	0xdd, 0x83, 0x78, 0xc3, 0xf8, 0xe2, 0xf2, 0xc7, 0xd2, 0xb6, 0x6e, 0x96, 0xb6, 0xf5, 0x6b, 0x69,
	0x5b, 0xdf, 0x56, 0x76, 0xed, 0x66, 0x65, 0xd7, 0x7e, 0xae, 0xec, 0xda, 0xc7, 0xd3, 0x30, 0x96,
	0x09, 0xf3, 0xc7, 0x53, 0xfe, 0xc5, 0x91, 0x11, 0xcf, 0xf5, 0xed, 0xe8, 0x53, 0xca, 0x03, 0x74,
	0xbe, 0x9e, 0x39, 0xb3, 0xbf, 0x79, 0xb1, 0xdb, 0x6f, 0xe8, 0xff, 0xe8, 0xec, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4b, 0x43, 0x46, 0x7f, 0x89, 0x03, 0x00, 0x00,
}

func (m *QueryInboundAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboundAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboundAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DustThreshold) > 0 {
		i -= len(m.DustThreshold)
		copy(dAtA[i:], m.DustThreshold)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.DustThreshold)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.OutboundFee) > 0 {
		i -= len(m.OutboundFee)
		copy(dAtA[i:], m.OutboundFee)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.OutboundFee)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OutboundTxSize) > 0 {
		i -= len(m.OutboundTxSize)
		copy(dAtA[i:], m.OutboundTxSize)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.OutboundTxSize)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.GasRateUnits) > 0 {
		i -= len(m.GasRateUnits)
		copy(dAtA[i:], m.GasRateUnits)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.GasRateUnits)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GasRate) > 0 {
		i -= len(m.GasRate)
		copy(dAtA[i:], m.GasRate)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.GasRate)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ChainLpActionsPaused {
		i--
		if m.ChainLpActionsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ChainTradingPaused {
		i--
		if m.ChainTradingPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.GlobalTradingPaused {
		i--
		if m.GlobalTradingPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Halted {
		i--
		if m.Halted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInboundAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboundAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboundAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryInboundAddress(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInboundAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboundAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboundAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InboundAddresses) > 0 {
		for iNdEx := len(m.InboundAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryInboundAddress(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryInboundAddress(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryInboundAddress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInboundAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	if m.Halted {
		n += 2
	}
	if m.GlobalTradingPaused {
		n += 2
	}
	if m.ChainTradingPaused {
		n += 2
	}
	if m.ChainLpActionsPaused {
		n += 2
	}
	l = len(m.GasRate)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.GasRateUnits)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.OutboundTxSize)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.OutboundFee)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	l = len(m.DustThreshold)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	return n
}

func (m *QueryInboundAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryInboundAddress(uint64(l))
	}
	return n
}

func (m *QueryInboundAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundAddresses) > 0 {
		for _, e := range m.InboundAddresses {
			l = e.Size()
			n += 1 + l + sovQueryInboundAddress(uint64(l))
		}
	}
	return n
}

func sovQueryInboundAddress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryInboundAddress(x uint64) (n int) {
	return sovQueryInboundAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInboundAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryInboundAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboundAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboundAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalTradingPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalTradingPaused = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTradingPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChainTradingPaused = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainLpActionsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChainLpActionsPaused = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRateUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRateUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryInboundAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInboundAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryInboundAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboundAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboundAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryInboundAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInboundAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryInboundAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboundAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboundAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundAddresses = append(m.InboundAddresses, &QueryInboundAddressResponse{})
			if err := m.InboundAddresses[len(m.InboundAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryInboundAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryInboundAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryInboundAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryInboundAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryInboundAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryInboundAddress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryInboundAddress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryInboundAddress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryInboundAddress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryInboundAddress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryInboundAddress = fmt.Errorf("proto: unexpected end of group")
)
