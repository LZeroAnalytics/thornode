// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_thorname.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryThornameRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryThornameRequest) Reset()         { *m = QueryThornameRequest{} }
func (m *QueryThornameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThornameRequest) ProtoMessage()    {}
func (*QueryThornameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_280c1b1a6eae51cb, []int{0}
}
func (m *QueryThornameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryThornameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThornameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryThornameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThornameRequest.Merge(m, src)
}
func (m *QueryThornameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryThornameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThornameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThornameRequest proto.InternalMessageInfo

func (m *QueryThornameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryThornameRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryThornameResponse struct {
	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExpireBlockHeight int64  `protobuf:"varint,2,opt,name=expire_block_height,json=expireBlockHeight,proto3" json:"expire_block_height,omitempty"`
	Owner             string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	PreferredAsset    string `protobuf:"bytes,4,opt,name=preferred_asset,json=preferredAsset,proto3" json:"preferred_asset"`
	// Amount of RUNE currently accrued by this thorname in affiliate fees waiting to be swapped to preferred asset.
	AffiliateCollectorRune string           `protobuf:"bytes,5,opt,name=affiliate_collector_rune,json=affiliateCollectorRune,proto3" json:"affiliate_collector_rune,omitempty"`
	Aliases                []*ThornameAlias `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases"`
}

func (m *QueryThornameResponse) Reset()         { *m = QueryThornameResponse{} }
func (m *QueryThornameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThornameResponse) ProtoMessage()    {}
func (*QueryThornameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_280c1b1a6eae51cb, []int{1}
}
func (m *QueryThornameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryThornameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThornameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryThornameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThornameResponse.Merge(m, src)
}
func (m *QueryThornameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryThornameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThornameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThornameResponse proto.InternalMessageInfo

func (m *QueryThornameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryThornameResponse) GetExpireBlockHeight() int64 {
	if m != nil {
		return m.ExpireBlockHeight
	}
	return 0
}

func (m *QueryThornameResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryThornameResponse) GetPreferredAsset() string {
	if m != nil {
		return m.PreferredAsset
	}
	return ""
}

func (m *QueryThornameResponse) GetAffiliateCollectorRune() string {
	if m != nil {
		return m.AffiliateCollectorRune
	}
	return ""
}

func (m *QueryThornameResponse) GetAliases() []*ThornameAlias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type ThornameAlias struct {
	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ThornameAlias) Reset()         { *m = ThornameAlias{} }
func (m *ThornameAlias) String() string { return proto.CompactTextString(m) }
func (*ThornameAlias) ProtoMessage()    {}
func (*ThornameAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_280c1b1a6eae51cb, []int{2}
}
func (m *ThornameAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThornameAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThornameAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThornameAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThornameAlias.Merge(m, src)
}
func (m *ThornameAlias) XXX_Size() int {
	return m.Size()
}
func (m *ThornameAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_ThornameAlias.DiscardUnknown(m)
}

var xxx_messageInfo_ThornameAlias proto.InternalMessageInfo

func (m *ThornameAlias) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *ThornameAlias) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryThornameRequest)(nil), "types.QueryThornameRequest")
	proto.RegisterType((*QueryThornameResponse)(nil), "types.QueryThornameResponse")
	proto.RegisterType((*ThornameAlias)(nil), "types.ThornameAlias")
}

func init() { proto.RegisterFile("types/query_thorname.proto", fileDescriptor_280c1b1a6eae51cb) }

var fileDescriptor_280c1b1a6eae51cb = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0xae, 0xda, 0x30,
	0x18, 0xc5, 0x09, 0x7f, 0x55, 0xa3, 0xb6, 0xaa, 0x49, 0x91, 0xc5, 0x10, 0x10, 0x13, 0x53, 0x22,
	0xc1, 0x52, 0xa9, 0x95, 0x2a, 0xd2, 0xa5, 0x43, 0x97, 0x46, 0x9d, 0xba, 0x44, 0x26, 0xf9, 0x48,
	0xa2, 0x86, 0x38, 0xd8, 0x4e, 0x0b, 0x6f, 0xd1, 0xa7, 0xe8, 0xb3, 0x74, 0x64, 0xbc, 0x13, 0xba,
	0x82, 0x8d, 0xa7, 0xb8, 0xb2, 0x93, 0x20, 0x2e, 0xba, 0xdb, 0x39, 0xe7, 0x67, 0x9f, 0xe4, 0xfb,
	0x12, 0x34, 0x92, 0xfb, 0x1c, 0x84, 0xb3, 0x2d, 0x80, 0xef, 0x7d, 0x19, 0x33, 0x9e, 0xd1, 0x0d,
	0xd8, 0x39, 0x67, 0x92, 0xe1, 0x8e, 0x66, 0x23, 0x33, 0x62, 0x11, 0xd3, 0x89, 0xa3, 0x54, 0x09,
	0xa7, 0x2e, 0x32, 0xbf, 0xab, 0x4b, 0x3f, 0xaa, 0x3b, 0x1e, 0x6c, 0x0b, 0x10, 0x12, 0x63, 0xd4,
	0x56, 0x96, 0x18, 0x13, 0x63, 0xf6, 0xca, 0xd3, 0x1a, 0x0f, 0x51, 0x37, 0x86, 0x24, 0x8a, 0x25,
	0x69, 0xea, 0xb4, 0x72, 0xd3, 0x7f, 0x4d, 0xf4, 0xfe, 0xae, 0x44, 0xe4, 0x2c, 0x13, 0xf0, 0x62,
	0x8b, 0x8d, 0x06, 0xb0, 0xcb, 0x13, 0x0e, 0xfe, 0x2a, 0x65, 0xc1, 0x2f, 0xff, 0xa6, 0xb2, 0xe5,
	0xbd, 0x2b, 0x91, 0xab, 0xc8, 0x57, 0x0d, 0xb0, 0x89, 0x3a, 0xec, 0x4f, 0x06, 0x9c, 0xb4, 0x74,
	0x49, 0x69, 0xf0, 0x27, 0xf4, 0x36, 0xe7, 0xb0, 0x06, 0xce, 0x21, 0xf4, 0xa9, 0x10, 0x20, 0x49,
	0x5b, 0x71, 0x77, 0x70, 0x39, 0x8e, 0xef, 0x91, 0xf7, 0xe6, 0x1a, 0x2c, 0x95, 0xc7, 0x1f, 0x10,
	0xa1, 0xeb, 0x75, 0x92, 0x26, 0x54, 0x82, 0x1f, 0xb0, 0x34, 0x85, 0x40, 0x32, 0xee, 0xf3, 0x22,
	0x03, 0xd2, 0xd1, 0x8f, 0x19, 0x5e, 0xf9, 0x97, 0x1a, 0x7b, 0x45, 0x06, 0xf8, 0x23, 0xea, 0xd1,
	0x34, 0xa1, 0x02, 0x04, 0xe9, 0x4e, 0x5a, 0xb3, 0xfe, 0xdc, 0xb4, 0xf5, 0x7a, 0xed, 0x7a, 0xf6,
	0xa5, 0xa2, 0x6e, 0xff, 0x72, 0x1c, 0xd7, 0x07, 0xbd, 0x5a, 0x4c, 0x3f, 0xa3, 0xd7, 0xcf, 0x8e,
	0xa9, 0xd9, 0x82, 0x98, 0x26, 0x59, 0xb5, 0xa0, 0xd2, 0x60, 0x82, 0x7a, 0x34, 0x0c, 0x39, 0x08,
	0x51, 0x2d, 0xba, 0xb6, 0xee, 0xb7, 0xff, 0x27, 0xcb, 0x38, 0x9c, 0x2c, 0xe3, 0xf1, 0x64, 0x19,
	0x7f, 0xcf, 0x56, 0xe3, 0x70, 0xb6, 0x1a, 0x0f, 0x67, 0xab, 0xf1, 0x73, 0x1e, 0x25, 0x32, 0xa5,
	0x2b, 0x3b, 0x60, 0x1b, 0x47, 0x7d, 0x7f, 0xdd, 0xa4, 0x55, 0xc6, 0x42, 0x70, 0x7e, 0x2f, 0x9c,
	0xdd, 0x6d, 0xae, 0x5e, 0x79, 0xd5, 0xd5, 0xbf, 0xc0, 0xe2, 0x29, 0x00, 0x00, 0xff, 0xff, 0x42,
	0xe5, 0xf6, 0xb0, 0x3d, 0x02, 0x00, 0x00,
}

func (m *QueryThornameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThornameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThornameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryThornameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThornameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThornameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Aliases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryThorname(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AffiliateCollectorRune) > 0 {
		i -= len(m.AffiliateCollectorRune)
		copy(dAtA[i:], m.AffiliateCollectorRune)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.AffiliateCollectorRune)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreferredAsset) > 0 {
		i -= len(m.PreferredAsset)
		copy(dAtA[i:], m.PreferredAsset)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.PreferredAsset)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpireBlockHeight != 0 {
		i = encodeVarintQueryThorname(dAtA, i, uint64(m.ExpireBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThornameAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThornameAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThornameAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryThorname(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryThorname(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryThorname(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryThornameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	return n
}

func (m *QueryThornameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	if m.ExpireBlockHeight != 0 {
		n += 1 + sovQueryThorname(uint64(m.ExpireBlockHeight))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	l = len(m.PreferredAsset)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	l = len(m.AffiliateCollectorRune)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	if len(m.Aliases) > 0 {
		for _, e := range m.Aliases {
			l = e.Size()
			n += 1 + l + sovQueryThorname(uint64(l))
		}
	}
	return n
}

func (m *ThornameAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryThorname(uint64(l))
	}
	return n
}

func sovQueryThorname(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryThorname(x uint64) (n int) {
	return sovQueryThorname(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryThornameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryThorname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThornameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThornameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryThorname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThornameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryThorname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThornameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThornameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireBlockHeight", wireType)
			}
			m.ExpireBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateCollectorRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateCollectorRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, &ThornameAlias{})
			if err := m.Aliases[len(m.Aliases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryThorname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThornameAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryThorname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThornameAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThornameAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryThorname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryThorname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryThorname(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryThorname
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryThorname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryThorname
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryThorname
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryThorname
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryThorname        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryThorname          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryThorname = fmt.Errorf("proto: unexpected end of group")
)
