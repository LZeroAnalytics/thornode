// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_pool_slip.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPoolSlipRequest struct {
	Asset  string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryPoolSlipRequest) Reset()         { *m = QueryPoolSlipRequest{} }
func (m *QueryPoolSlipRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolSlipRequest) ProtoMessage()    {}
func (*QueryPoolSlipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65505c19f6aeec33, []int{0}
}
func (m *QueryPoolSlipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolSlipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolSlipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolSlipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolSlipRequest.Merge(m, src)
}
func (m *QueryPoolSlipRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolSlipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolSlipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolSlipRequest proto.InternalMessageInfo

func (m *QueryPoolSlipRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryPoolSlipRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryPoolSlipResponse struct {
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	// Pool slip for this asset's pool for the current height
	PoolSlip int64 `protobuf:"varint,2,opt,name=pool_slip,json=poolSlip,proto3" json:"pool_slip"`
	// Number of stored pool slips contributing to the current stored rollup
	RollupCount int64 `protobuf:"varint,3,opt,name=rollup_count,json=rollupCount,proto3" json:"rollup_count"`
	// Median of rollup snapshots over a long period
	LongRollup int64 `protobuf:"varint,4,opt,name=long_rollup,json=longRollup,proto3" json:"long_rollup"`
	// Stored sum of pool slips over a number of previous block heights
	Rollup int64 `protobuf:"varint,5,opt,name=rollup,proto3" json:"rollup"`
	// Summed pool slips over a number of previous block heights, to checksum the stored rollup
	SummedRollup int64 `protobuf:"varint,6,opt,name=summed_rollup,json=summedRollup,proto3" json:"summed_rollup,omitempty"`
}

func (m *QueryPoolSlipResponse) Reset()         { *m = QueryPoolSlipResponse{} }
func (m *QueryPoolSlipResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolSlipResponse) ProtoMessage()    {}
func (*QueryPoolSlipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65505c19f6aeec33, []int{1}
}
func (m *QueryPoolSlipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolSlipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolSlipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolSlipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolSlipResponse.Merge(m, src)
}
func (m *QueryPoolSlipResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolSlipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolSlipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolSlipResponse proto.InternalMessageInfo

func (m *QueryPoolSlipResponse) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryPoolSlipResponse) GetPoolSlip() int64 {
	if m != nil {
		return m.PoolSlip
	}
	return 0
}

func (m *QueryPoolSlipResponse) GetRollupCount() int64 {
	if m != nil {
		return m.RollupCount
	}
	return 0
}

func (m *QueryPoolSlipResponse) GetLongRollup() int64 {
	if m != nil {
		return m.LongRollup
	}
	return 0
}

func (m *QueryPoolSlipResponse) GetRollup() int64 {
	if m != nil {
		return m.Rollup
	}
	return 0
}

func (m *QueryPoolSlipResponse) GetSummedRollup() int64 {
	if m != nil {
		return m.SummedRollup
	}
	return 0
}

type QueryPoolSlipsRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryPoolSlipsRequest) Reset()         { *m = QueryPoolSlipsRequest{} }
func (m *QueryPoolSlipsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolSlipsRequest) ProtoMessage()    {}
func (*QueryPoolSlipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65505c19f6aeec33, []int{2}
}
func (m *QueryPoolSlipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolSlipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolSlipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolSlipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolSlipsRequest.Merge(m, src)
}
func (m *QueryPoolSlipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolSlipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolSlipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolSlipsRequest proto.InternalMessageInfo

func (m *QueryPoolSlipsRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryPoolSlipsResponse struct {
	PoolSlips []*QueryPoolSlipResponse `protobuf:"bytes,1,rep,name=pool_slips,json=poolSlips,proto3" json:"pool_slips,omitempty"`
}

func (m *QueryPoolSlipsResponse) Reset()         { *m = QueryPoolSlipsResponse{} }
func (m *QueryPoolSlipsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolSlipsResponse) ProtoMessage()    {}
func (*QueryPoolSlipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65505c19f6aeec33, []int{3}
}
func (m *QueryPoolSlipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolSlipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolSlipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolSlipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolSlipsResponse.Merge(m, src)
}
func (m *QueryPoolSlipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolSlipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolSlipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolSlipsResponse proto.InternalMessageInfo

func (m *QueryPoolSlipsResponse) GetPoolSlips() []*QueryPoolSlipResponse {
	if m != nil {
		return m.PoolSlips
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPoolSlipRequest)(nil), "types.QueryPoolSlipRequest")
	proto.RegisterType((*QueryPoolSlipResponse)(nil), "types.QueryPoolSlipResponse")
	proto.RegisterType((*QueryPoolSlipsRequest)(nil), "types.QueryPoolSlipsRequest")
	proto.RegisterType((*QueryPoolSlipsResponse)(nil), "types.QueryPoolSlipsResponse")
}

func init() { proto.RegisterFile("types/query_pool_slip.proto", fileDescriptor_65505c19f6aeec33) }

var fileDescriptor_65505c19f6aeec33 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x3d, 0x6f, 0xab, 0x30,
	0x14, 0x86, 0xe3, 0x7c, 0xa0, 0x8b, 0x93, 0xe8, 0x5e, 0x59, 0xb9, 0x11, 0xba, 0xb7, 0x82, 0x88,
	0x29, 0xed, 0x00, 0x55, 0x33, 0x76, 0x4b, 0xbb, 0x74, 0x6b, 0x5d, 0x75, 0xe9, 0x82, 0xf2, 0x61,
	0x01, 0x92, 0x83, 0x1d, 0x6c, 0xa4, 0xe6, 0x5f, 0x74, 0xee, 0x2f, 0xca, 0x98, 0xb1, 0x13, 0xaa,
	0x92, 0x8d, 0x5f, 0x51, 0x61, 0x20, 0x5f, 0xea, 0xc4, 0x79, 0x9f, 0x73, 0xce, 0x8b, 0xf5, 0xda,
	0xf0, 0xbf, 0x5c, 0x71, 0x22, 0xdc, 0x65, 0x42, 0xe2, 0x95, 0xc7, 0x19, 0xa3, 0x9e, 0xa0, 0x21,
	0x77, 0x78, 0xcc, 0x24, 0x43, 0x2d, 0xd5, 0xfc, 0xd7, 0xf3, 0x99, 0xcf, 0x14, 0x71, 0xf3, 0xaa,
	0x68, 0xda, 0xf7, 0xb0, 0xf7, 0x94, 0x6f, 0x3d, 0x32, 0x46, 0x9f, 0x69, 0xc8, 0x31, 0x59, 0x26,
	0x44, 0x48, 0xd4, 0x83, 0xad, 0x89, 0x10, 0x44, 0x1a, 0x60, 0x00, 0x86, 0x3a, 0x2e, 0x04, 0xea,
	0x43, 0x2d, 0x20, 0xa1, 0x1f, 0x48, 0xa3, 0xae, 0x70, 0xa9, 0xec, 0x8f, 0x3a, 0xfc, 0x7b, 0x66,
	0x23, 0x38, 0x8b, 0x04, 0x41, 0xd6, 0x89, 0xcf, 0x58, 0xcf, 0x52, 0xab, 0x00, 0x95, 0xe5, 0x15,
	0xd4, 0xf7, 0x07, 0x56, 0xae, 0x8d, 0x71, 0x37, 0x4b, 0xad, 0x03, 0xc4, 0xbf, 0x78, 0x69, 0x8a,
	0x46, 0xb0, 0x13, 0x33, 0x4a, 0x13, 0xee, 0xcd, 0x58, 0x12, 0x49, 0xa3, 0xa1, 0xc6, 0xff, 0x64,
	0xa9, 0x75, 0xc2, 0x71, 0xbb, 0x50, 0x77, 0xb9, 0x40, 0xd7, 0xb0, 0x4d, 0x59, 0xe4, 0x7b, 0x05,
	0x33, 0x9a, 0x6a, 0xe7, 0x77, 0x96, 0x5a, 0xc7, 0x18, 0xc3, 0x5c, 0x60, 0x55, 0x23, 0x1b, 0x6a,
	0xe5, 0x70, 0x4b, 0x0d, 0xc3, 0x2c, 0xb5, 0x4a, 0x82, 0xcb, 0x2f, 0xba, 0x84, 0x5d, 0x91, 0x2c,
	0x16, 0x64, 0x5e, 0xf9, 0x6a, 0x6a, 0xb4, 0xb9, 0x4e, 0x2d, 0x80, 0x3b, 0x45, 0xab, 0xb0, 0xb3,
	0xdd, 0xb3, 0x6c, 0x44, 0x95, 0xf1, 0x21, 0x4d, 0x70, 0x92, 0xe6, 0x0b, 0xec, 0x9f, 0x2f, 0x94,
	0x69, 0xde, 0x42, 0xb8, 0xcf, 0x45, 0x18, 0x60, 0xd0, 0x18, 0xb6, 0x6f, 0x2e, 0x1c, 0x75, 0xbf,
	0xce, 0x8f, 0xf9, 0x63, 0xbd, 0x0a, 0x4f, 0x8c, 0x1f, 0xd6, 0x5b, 0x13, 0x6c, 0xb6, 0x26, 0xf8,
	0xda, 0x9a, 0xe0, 0x7d, 0x67, 0xd6, 0x36, 0x3b, 0xb3, 0xf6, 0xb9, 0x33, 0x6b, 0xaf, 0xae, 0x1f,
	0x4a, 0x3a, 0x99, 0x3a, 0x33, 0xb6, 0x70, 0x65, 0xc0, 0xe2, 0x59, 0x30, 0x09, 0x23, 0x55, 0x45,
	0x6c, 0x4e, 0xdc, 0xb7, 0x63, 0x98, 0xff, 0x6b, 0xaa, 0xa9, 0xc7, 0x33, 0xfa, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x77, 0xb1, 0xae, 0x74, 0x78, 0x02, 0x00, 0x00,
}

func (m *QueryPoolSlipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolSlipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolSlipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolSlipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolSlipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolSlipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SummedRollup != 0 {
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(m.SummedRollup))
		i--
		dAtA[i] = 0x30
	}
	if m.Rollup != 0 {
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(m.Rollup))
		i--
		dAtA[i] = 0x28
	}
	if m.LongRollup != 0 {
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(m.LongRollup))
		i--
		dAtA[i] = 0x20
	}
	if m.RollupCount != 0 {
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(m.RollupCount))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolSlip != 0 {
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(m.PoolSlip))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolSlipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolSlipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolSlipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryPoolSlip(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolSlipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolSlipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolSlipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolSlips) > 0 {
		for iNdEx := len(m.PoolSlips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolSlips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryPoolSlip(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryPoolSlip(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryPoolSlip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolSlipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryPoolSlip(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryPoolSlip(uint64(l))
	}
	return n
}

func (m *QueryPoolSlipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryPoolSlip(uint64(l))
	}
	if m.PoolSlip != 0 {
		n += 1 + sovQueryPoolSlip(uint64(m.PoolSlip))
	}
	if m.RollupCount != 0 {
		n += 1 + sovQueryPoolSlip(uint64(m.RollupCount))
	}
	if m.LongRollup != 0 {
		n += 1 + sovQueryPoolSlip(uint64(m.LongRollup))
	}
	if m.Rollup != 0 {
		n += 1 + sovQueryPoolSlip(uint64(m.Rollup))
	}
	if m.SummedRollup != 0 {
		n += 1 + sovQueryPoolSlip(uint64(m.SummedRollup))
	}
	return n
}

func (m *QueryPoolSlipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryPoolSlip(uint64(l))
	}
	return n
}

func (m *QueryPoolSlipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolSlips) > 0 {
		for _, e := range m.PoolSlips {
			l = e.Size()
			n += 1 + l + sovQueryPoolSlip(uint64(l))
		}
	}
	return n
}

func sovQueryPoolSlip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryPoolSlip(x uint64) (n int) {
	return sovQueryPoolSlip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolSlipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPoolSlip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolSlipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolSlipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPoolSlip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolSlipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPoolSlip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolSlipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolSlipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSlip", wireType)
			}
			m.PoolSlip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolSlip |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupCount", wireType)
			}
			m.RollupCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollupCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongRollup", wireType)
			}
			m.LongRollup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongRollup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			m.Rollup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rollup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummedRollup", wireType)
			}
			m.SummedRollup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SummedRollup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPoolSlip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolSlipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPoolSlip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolSlipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolSlipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPoolSlip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolSlipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPoolSlip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolSlipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolSlipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSlips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolSlips = append(m.PoolSlips, &QueryPoolSlipResponse{})
			if err := m.PoolSlips[len(m.PoolSlips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPoolSlip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPoolSlip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryPoolSlip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryPoolSlip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryPoolSlip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryPoolSlip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryPoolSlip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryPoolSlip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryPoolSlip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryPoolSlip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryPoolSlip = fmt.Errorf("proto: unexpected end of group")
)
