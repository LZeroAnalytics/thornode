// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_rotate.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRotate struct {
	Signer          github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	OperatorAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"operator_address,omitempty"`
	Coin            common.Coin                                   `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgRotate) Reset()         { *m = MsgRotate{} }
func (m *MsgRotate) String() string { return proto.CompactTextString(m) }
func (*MsgRotate) ProtoMessage()    {}
func (*MsgRotate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff7e9a48d85b95fe, []int{0}
}
func (m *MsgRotate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRotate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRotate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRotate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRotate.Merge(m, src)
}
func (m *MsgRotate) XXX_Size() int {
	return m.Size()
}
func (m *MsgRotate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRotate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRotate proto.InternalMessageInfo

func (m *MsgRotate) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgRotate) GetOperatorAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.OperatorAddress
	}
	return nil
}

func (m *MsgRotate) GetCoin() common.Coin {
	if m != nil {
		return m.Coin
	}
	return common.Coin{}
}

func init() {
	proto.RegisterType((*MsgRotate)(nil), "types.MsgRotate")
}

func init() { proto.RegisterFile("types/msg_rotate.proto", fileDescriptor_ff7e9a48d85b95fe) }

var fileDescriptor_ff7e9a48d85b95fe = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x1b, 0x9d, 0x03, 0xeb, 0x40, 0xa9, 0x22, 0x65, 0x87, 0x6c, 0x78, 0x90, 0x5d, 0xd6,
	0xe0, 0xf6, 0x04, 0xab, 0x27, 0x41, 0x2f, 0x3d, 0x8a, 0x30, 0xb2, 0x34, 0xa4, 0x41, 0x93, 0xaf,
	0x24, 0x51, 0xf4, 0x2d, 0x7c, 0xac, 0x1d, 0x77, 0xf4, 0x20, 0x43, 0xda, 0xb7, 0xf0, 0x24, 0x4b,
	0x2a, 0x78, 0xf6, 0xf4, 0xfd, 0xf9, 0xfd, 0xe1, 0x97, 0x2f, 0x5f, 0x7c, 0xee, 0xde, 0x6a, 0x6e,
	0x89, 0xb2, 0x62, 0x69, 0xc0, 0x51, 0xc7, 0xb3, 0xda, 0x80, 0x83, 0xe4, 0xc0, 0xf3, 0xe1, 0x29,
	0x03, 0xa5, 0x40, 0x93, 0x30, 0x42, 0x37, 0x3c, 0x13, 0x20, 0xc0, 0x47, 0xb2, 0x4b, 0x81, 0x5e,
	0x7c, 0xa2, 0xf8, 0xf0, 0xce, 0x8a, 0xc2, 0x5b, 0x92, 0x9b, 0xb8, 0x6f, 0xa5, 0xd0, 0xdc, 0xa4,
	0x68, 0x8c, 0x26, 0x83, 0xfc, 0xea, 0x7b, 0x3b, 0x9a, 0x0a, 0xe9, 0xaa, 0xe7, 0x55, 0xc6, 0x40,
	0x11, 0x06, 0x56, 0x81, 0xed, 0xc6, 0xd4, 0x96, 0x8f, 0xc4, 0x3f, 0x98, 0x2d, 0x18, 0x5b, 0x94,
	0xa5, 0xe1, 0xd6, 0x16, 0x9d, 0x20, 0x79, 0x88, 0x4f, 0xa0, 0xe6, 0x86, 0x3a, 0x30, 0x4b, 0x1a,
	0xba, 0x74, 0xef, 0xbf, 0xd2, 0xe3, 0x5f, 0x55, 0x07, 0x92, 0xcb, 0xb8, 0xc7, 0x40, 0xea, 0x74,
	0x7f, 0x8c, 0x26, 0x47, 0xb3, 0x41, 0xd6, 0xfd, 0xf4, 0x1a, 0xa4, 0xce, 0x7b, 0xeb, 0xed, 0x28,
	0x2a, 0x7c, 0x9f, 0xdf, 0xae, 0x1b, 0x8c, 0x36, 0x0d, 0x46, 0x5f, 0x0d, 0x46, 0xef, 0x2d, 0x8e,
	0x36, 0x2d, 0x8e, 0x3e, 0x5a, 0x1c, 0xdd, 0xcf, 0x84, 0x74, 0x4f, 0x34, 0x6c, 0xe0, 0x2a, 0x30,
	0xac, 0xa2, 0x52, 0xfb, 0xa4, 0xa1, 0xe4, 0xe4, 0x65, 0x4e, 0x5e, 0xff, 0xf2, 0xdd, 0x46, 0xab,
	0xbe, 0xbf, 0xd9, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x34, 0x27, 0xec, 0xa6, 0x7f, 0x01, 0x00,
	0x00,
}

func (m *MsgRotate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRotate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRotate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgRotate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintMsgRotate(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgRotate(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgRotate(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgRotate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRotate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgRotate(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgRotate(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovMsgRotate(uint64(l))
	return n
}

func sovMsgRotate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgRotate(x uint64) (n int) {
	return sovMsgRotate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRotate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRotate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRotate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRotate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRotate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgRotate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRotate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRotate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgRotate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRotate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = append(m.OperatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorAddress == nil {
				m.OperatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRotate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRotate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRotate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRotate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgRotate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgRotate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgRotate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRotate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRotate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgRotate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgRotate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgRotate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgRotate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgRotate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgRotate = fmt.Errorf("proto: unexpected end of group")
)
