// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_modify_limit_swap.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/v3/common"
	gitlab_com_thorchain_thornode_v3_common "gitlab.com/thorchain/thornode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgModifyLimitSwap struct {
	From                 gitlab_com_thorchain_thornode_v3_common.Address `protobuf:"bytes,1,opt,name=from,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Address" json:"from,omitempty"`
	Source               common.Coin                                     `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	Target               common.Coin                                     `protobuf:"bytes,3,opt,name=target,proto3" json:"target"`
	ModifiedTargetAmount cosmossdk_io_math.Uint                          `protobuf:"bytes,4,opt,name=modified_target_amount,json=modifiedTargetAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"modified_target_amount"`
	Signer               github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,5,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgModifyLimitSwap) Reset()         { *m = MsgModifyLimitSwap{} }
func (m *MsgModifyLimitSwap) String() string { return proto.CompactTextString(m) }
func (*MsgModifyLimitSwap) ProtoMessage()    {}
func (*MsgModifyLimitSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_083238984b03d665, []int{0}
}
func (m *MsgModifyLimitSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyLimitSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyLimitSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyLimitSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyLimitSwap.Merge(m, src)
}
func (m *MsgModifyLimitSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyLimitSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyLimitSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyLimitSwap proto.InternalMessageInfo

func (m *MsgModifyLimitSwap) GetFrom() gitlab_com_thorchain_thornode_v3_common.Address {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgModifyLimitSwap) GetSource() common.Coin {
	if m != nil {
		return m.Source
	}
	return common.Coin{}
}

func (m *MsgModifyLimitSwap) GetTarget() common.Coin {
	if m != nil {
		return m.Target
	}
	return common.Coin{}
}

func (m *MsgModifyLimitSwap) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgModifyLimitSwap)(nil), "types.MsgModifyLimitSwap")
}

func init() { proto.RegisterFile("types/msg_modify_limit_swap.proto", fileDescriptor_083238984b03d665) }

var fileDescriptor_083238984b03d665 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xb7, 0x69, 0x6a, 0x09, 0xd3, 0x05, 0x53, 0x15, 0xab, 0x42, 0x76, 0x60, 0x8a, 0x22, 0xea,
	0x13, 0xf1, 0x86, 0x58, 0x62, 0x06, 0x96, 0x76, 0x31, 0x61, 0x61, 0xb1, 0x2e, 0xe7, 0xeb, 0xf9,
	0xd4, 0xde, 0x3d, 0xcb, 0x77, 0x69, 0xe9, 0xca, 0xc8, 0x02, 0x33, 0x9f, 0xa2, 0x1f, 0xa3, 0x63,
	0x46, 0xc4, 0x60, 0xa1, 0x64, 0xc8, 0x77, 0xc8, 0x84, 0x7c, 0xe7, 0x08, 0x24, 0x84, 0xba, 0xdc,
	0x7b, 0xf7, 0x7b, 0xbf, 0xf7, 0xef, 0xf7, 0xfc, 0xe7, 0xfa, 0xa6, 0xa6, 0x0a, 0x09, 0xc5, 0x0a,
	0x01, 0x25, 0x3f, 0xbf, 0x29, 0x2e, 0xb9, 0xe0, 0xba, 0x50, 0xd7, 0xb8, 0x4e, 0xea, 0x06, 0x34,
	0x04, 0xfb, 0x86, 0x72, 0xfc, 0x84, 0x80, 0x10, 0x20, 0x91, 0x35, 0x36, 0x76, 0x7c, 0xc8, 0x80,
	0x81, 0x71, 0x51, 0xe7, 0xf5, 0xe8, 0x63, 0x2c, 0xb8, 0x04, 0x64, 0xde, 0x1e, 0x7a, 0x4a, 0x40,
	0x09, 0x30, 0x8d, 0xd0, 0xd5, 0xab, 0xce, 0xd8, 0xc0, 0x8b, 0xaf, 0x7b, 0x7e, 0x70, 0xa6, 0xd8,
	0x99, 0x69, 0x7e, 0xda, 0xf5, 0x7e, 0x7f, 0x8d, 0xeb, 0xe0, 0x9d, 0x3f, 0x38, 0x6f, 0x40, 0x84,
	0xee, 0xd0, 0x1d, 0x3d, 0xcc, 0xd2, 0x6d, 0x1b, 0x23, 0xc6, 0xf5, 0x25, 0x9e, 0x27, 0x04, 0x04,
	0xd2, 0x15, 0x34, 0xa4, 0xc2, 0x5c, 0x1a, 0x4f, 0x42, 0x49, 0xd1, 0x55, 0xba, 0x9b, 0x6c, 0x5a,
	0x96, 0x0d, 0x55, 0x2a, 0x37, 0x05, 0x82, 0xb1, 0xef, 0x29, 0x58, 0x34, 0x84, 0x86, 0x0f, 0x86,
	0xee, 0xe8, 0xd1, 0xe4, 0x20, 0xe9, 0x69, 0x6f, 0x81, 0xcb, 0x6c, 0x70, 0xd7, 0xc6, 0x4e, 0xde,
	0x33, 0x3a, 0xae, 0xc6, 0x0d, 0xa3, 0x3a, 0xdc, 0xfb, 0x3f, 0xd7, 0x32, 0x82, 0x99, 0x7f, 0x64,
	0x04, 0xe3, 0xb4, 0x2c, 0x2c, 0x54, 0x60, 0x01, 0x0b, 0xa9, 0xc3, 0x81, 0x19, 0x39, 0xea, 0xd8,
	0x3f, 0xdb, 0xf8, 0xc8, 0x2e, 0xae, 0xca, 0x8b, 0x84, 0x03, 0x12, 0x58, 0x57, 0xc9, 0x07, 0x2e,
	0x75, 0x7e, 0xb8, 0xcb, 0x9e, 0x99, 0xe4, 0xa9, 0xc9, 0x0d, 0x66, 0xbe, 0xa7, 0x38, 0x93, 0xb4,
	0x09, 0xf7, 0x87, 0xee, 0xe8, 0x20, 0x7b, 0xb3, 0x6d, 0xe3, 0x13, 0xc6, 0x75, 0xb5, 0xb0, 0x8b,
	0xf7, 0x2a, 0x5a, 0x73, 0xa2, 0xca, 0x0b, 0x64, 0x8e, 0x93, 0x4c, 0x09, 0xe9, 0xd7, 0xfe, 0xbe,
	0xb9, 0x1d, 0x7b, 0x73, 0x4a, 0xaa, 0x74, 0x92, 0xf7, 0xb5, 0x5e, 0xbf, 0xfc, 0xdc, 0x81, 0xf6,
	0xf3, 0x65, 0x73, 0x3b, 0x7e, 0xf6, 0x47, 0xbf, 0x7f, 0xa5, 0xcf, 0x4e, 0xef, 0x56, 0x91, 0xbb,
	0x5c, 0x45, 0xee, 0xaf, 0x55, 0xe4, 0x7e, 0x5b, 0x47, 0xce, 0x72, 0x1d, 0x39, 0x3f, 0xd6, 0x91,
	0xf3, 0x71, 0x72, 0xef, 0x09, 0x3e, 0xfd, 0x8d, 0x77, 0x93, 0xcd, 0x3d, 0x73, 0xe6, 0xf4, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xf9, 0xd9, 0x21, 0x69, 0x02, 0x00, 0x00,
}

func (m *MsgModifyLimitSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyLimitSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyLimitSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgModifyLimitSwap(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ModifiedTargetAmount.Size()
		i -= size
		if _, err := m.ModifiedTargetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgModifyLimitSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgModifyLimitSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgModifyLimitSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsgModifyLimitSwap(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgModifyLimitSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgModifyLimitSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgModifyLimitSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsgModifyLimitSwap(uint64(l))
	}
	l = m.Source.Size()
	n += 1 + l + sovMsgModifyLimitSwap(uint64(l))
	l = m.Target.Size()
	n += 1 + l + sovMsgModifyLimitSwap(uint64(l))
	l = m.ModifiedTargetAmount.Size()
	n += 1 + l + sovMsgModifyLimitSwap(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgModifyLimitSwap(uint64(l))
	}
	return n
}

func sovMsgModifyLimitSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgModifyLimitSwap(x uint64) (n int) {
	return sovMsgModifyLimitSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgModifyLimitSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgModifyLimitSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyLimitSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyLimitSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = gitlab_com_thorchain_thornode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTargetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModifiedTargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgModifyLimitSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgModifyLimitSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgModifyLimitSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgModifyLimitSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgModifyLimitSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgModifyLimitSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgModifyLimitSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgModifyLimitSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgModifyLimitSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgModifyLimitSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgModifyLimitSwap = fmt.Errorf("proto: unexpected end of group")
)
