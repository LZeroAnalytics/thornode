// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_eip712.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryEip712TypedDataRequest struct {
	SignBytes []byte `protobuf:"bytes,1,opt,name=sign_bytes,json=signBytes,proto3" json:"sign_bytes"`
}

func (m *QueryEip712TypedDataRequest) Reset()         { *m = QueryEip712TypedDataRequest{} }
func (m *QueryEip712TypedDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEip712TypedDataRequest) ProtoMessage()    {}
func (*QueryEip712TypedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f10866c30f85d4, []int{0}
}
func (m *QueryEip712TypedDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEip712TypedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEip712TypedDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEip712TypedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEip712TypedDataRequest.Merge(m, src)
}
func (m *QueryEip712TypedDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEip712TypedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEip712TypedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEip712TypedDataRequest proto.InternalMessageInfo

func (m *QueryEip712TypedDataRequest) GetSignBytes() []byte {
	if m != nil {
		return m.SignBytes
	}
	return nil
}

type QueryEip712TypedDataResponse struct {
	TypedData string `protobuf:"bytes,1,opt,name=typed_data,json=typedData,proto3" json:"typed_data"`
}

func (m *QueryEip712TypedDataResponse) Reset()         { *m = QueryEip712TypedDataResponse{} }
func (m *QueryEip712TypedDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEip712TypedDataResponse) ProtoMessage()    {}
func (*QueryEip712TypedDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f10866c30f85d4, []int{1}
}
func (m *QueryEip712TypedDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEip712TypedDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEip712TypedDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEip712TypedDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEip712TypedDataResponse.Merge(m, src)
}
func (m *QueryEip712TypedDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEip712TypedDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEip712TypedDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEip712TypedDataResponse proto.InternalMessageInfo

func (m *QueryEip712TypedDataResponse) GetTypedData() string {
	if m != nil {
		return m.TypedData
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryEip712TypedDataRequest)(nil), "types.QueryEip712TypedDataRequest")
	proto.RegisterType((*QueryEip712TypedDataResponse)(nil), "types.QueryEip712TypedDataResponse")
}

func init() { proto.RegisterFile("types/query_eip712.proto", fileDescriptor_55f10866c30f85d4) }

var fileDescriptor_55f10866c30f85d4 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x4f, 0xcd, 0x2c, 0x30, 0x37, 0x34, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0xcb, 0x48, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x45,
	0xf4, 0x41, 0x2c, 0x88, 0xa4, 0x92, 0x0f, 0x97, 0x74, 0x20, 0x48, 0x8b, 0x2b, 0x58, 0x47, 0x48,
	0x65, 0x41, 0x6a, 0x8a, 0x4b, 0x62, 0x49, 0x62, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90,
	0x2e, 0x17, 0x57, 0x71, 0x66, 0x7a, 0x5e, 0x7c, 0x52, 0x65, 0x49, 0x6a, 0xb1, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x8f, 0x13, 0xdf, 0xab, 0x7b, 0xf2, 0x48, 0xa2, 0x41, 0x9c, 0x20, 0xb6, 0x13, 0x88,
	0xa9, 0xe4, 0xcb, 0x25, 0x83, 0xdd, 0xb4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x90, 0x71, 0x20,
	0xc7, 0xa4, 0xc4, 0xa7, 0x24, 0x96, 0x24, 0x82, 0x8d, 0xe3, 0x84, 0x18, 0x87, 0x10, 0x0d, 0xe2,
	0x2c, 0x81, 0x69, 0x73, 0xf2, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28,
	0xa3, 0xf4, 0xcc, 0x92, 0x9c, 0xc4, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0x92, 0x8c, 0xfc, 0xa2,
	0xe4, 0x8c, 0xc4, 0xcc, 0x3c, 0x30, 0x2b, 0x2f, 0x3f, 0x25, 0x55, 0xbf, 0xcc, 0x58, 0xbf, 0x02,
	0x59, 0x1c, 0x14, 0x00, 0x49, 0x6c, 0x60, 0x1f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe1,
	0x35, 0xa1, 0xe0, 0x2a, 0x01, 0x00, 0x00,
}

func (m *QueryEip712TypedDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEip712TypedDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEip712TypedDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignBytes) > 0 {
		i -= len(m.SignBytes)
		copy(dAtA[i:], m.SignBytes)
		i = encodeVarintQueryEip712(dAtA, i, uint64(len(m.SignBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEip712TypedDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEip712TypedDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEip712TypedDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TypedData) > 0 {
		i -= len(m.TypedData)
		copy(dAtA[i:], m.TypedData)
		i = encodeVarintQueryEip712(dAtA, i, uint64(len(m.TypedData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryEip712(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryEip712(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEip712TypedDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignBytes)
	if l > 0 {
		n += 1 + l + sovQueryEip712(uint64(l))
	}
	return n
}

func (m *QueryEip712TypedDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypedData)
	if l > 0 {
		n += 1 + l + sovQueryEip712(uint64(l))
	}
	return n
}

func sovQueryEip712(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryEip712(x uint64) (n int) {
	return sovQueryEip712(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEip712TypedDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryEip712
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEip712TypedDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEip712TypedDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryEip712
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryEip712
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryEip712
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignBytes = append(m.SignBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignBytes == nil {
				m.SignBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryEip712(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryEip712
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEip712TypedDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryEip712
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEip712TypedDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEip712TypedDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryEip712
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryEip712
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryEip712
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryEip712(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryEip712
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryEip712(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryEip712
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryEip712
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryEip712
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryEip712
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryEip712
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryEip712
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryEip712        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryEip712          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryEip712 = fmt.Errorf("proto: unexpected end of group")
)
