/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MimirV2IDsResponse struct for MimirV2IDsResponse
type MimirV2IDsResponse struct {
	Id *int `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	LegacyKey *string `json:"legacy_key,omitempty"`
	VoteKey *string `json:"vote_key,omitempty"`
	Votes map[string]interface{} `json:"votes,omitempty"`
}

// NewMimirV2IDsResponse instantiates a new MimirV2IDsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirV2IDsResponse() *MimirV2IDsResponse {
	this := MimirV2IDsResponse{}
	return &this
}

// NewMimirV2IDsResponseWithDefaults instantiates a new MimirV2IDsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirV2IDsResponseWithDefaults() *MimirV2IDsResponse {
	this := MimirV2IDsResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MimirV2IDsResponse) GetId() int {
	if o == nil || o.Id == nil {
		var ret int
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetIdOk() (*int, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MimirV2IDsResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int and assigns it to the Id field.
func (o *MimirV2IDsResponse) SetId(v int) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MimirV2IDsResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MimirV2IDsResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MimirV2IDsResponse) SetName(v string) {
	o.Name = &v
}

// GetLegacyKey returns the LegacyKey field value if set, zero value otherwise.
func (o *MimirV2IDsResponse) GetLegacyKey() string {
	if o == nil || o.LegacyKey == nil {
		var ret string
		return ret
	}
	return *o.LegacyKey
}

// GetLegacyKeyOk returns a tuple with the LegacyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetLegacyKeyOk() (*string, bool) {
	if o == nil || o.LegacyKey == nil {
		return nil, false
	}
	return o.LegacyKey, true
}

// HasLegacyKey returns a boolean if a field has been set.
func (o *MimirV2IDsResponse) HasLegacyKey() bool {
	if o != nil && o.LegacyKey != nil {
		return true
	}

	return false
}

// SetLegacyKey gets a reference to the given string and assigns it to the LegacyKey field.
func (o *MimirV2IDsResponse) SetLegacyKey(v string) {
	o.LegacyKey = &v
}

// GetVoteKey returns the VoteKey field value if set, zero value otherwise.
func (o *MimirV2IDsResponse) GetVoteKey() string {
	if o == nil || o.VoteKey == nil {
		var ret string
		return ret
	}
	return *o.VoteKey
}

// GetVoteKeyOk returns a tuple with the VoteKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetVoteKeyOk() (*string, bool) {
	if o == nil || o.VoteKey == nil {
		return nil, false
	}
	return o.VoteKey, true
}

// HasVoteKey returns a boolean if a field has been set.
func (o *MimirV2IDsResponse) HasVoteKey() bool {
	if o != nil && o.VoteKey != nil {
		return true
	}

	return false
}

// SetVoteKey gets a reference to the given string and assigns it to the VoteKey field.
func (o *MimirV2IDsResponse) SetVoteKey(v string) {
	o.VoteKey = &v
}

// GetVotes returns the Votes field value if set, zero value otherwise.
func (o *MimirV2IDsResponse) GetVotes() map[string]interface{} {
	if o == nil || o.Votes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Votes
}

// GetVotesOk returns a tuple with the Votes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetVotesOk() (map[string]interface{}, bool) {
	if o == nil || o.Votes == nil {
		return nil, false
	}
	return o.Votes, true
}

// HasVotes returns a boolean if a field has been set.
func (o *MimirV2IDsResponse) HasVotes() bool {
	if o != nil && o.Votes != nil {
		return true
	}

	return false
}

// SetVotes gets a reference to the given map[string]interface{} and assigns it to the Votes field.
func (o *MimirV2IDsResponse) SetVotes(v map[string]interface{}) {
	o.Votes = v
}

func (o MimirV2IDsResponse) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LegacyKey != nil {
		toSerialize["legacy_key"] = o.LegacyKey
	}
	if o.VoteKey != nil {
		toSerialize["vote_key"] = o.VoteKey
	}
	if o.Votes != nil {
		toSerialize["votes"] = o.Votes
	}
	return json.Marshal(toSerialize)
}

type NullableMimirV2IDsResponse struct {
	value *MimirV2IDsResponse
	isSet bool
}

func (v NullableMimirV2IDsResponse) Get() *MimirV2IDsResponse {
	return v.value
}

func (v *NullableMimirV2IDsResponse) Set(val *MimirV2IDsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirV2IDsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirV2IDsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirV2IDsResponse(val *MimirV2IDsResponse) *NullableMimirV2IDsResponse {
	return &NullableMimirV2IDsResponse{value: val, isSet: true}
}

func (v NullableMimirV2IDsResponse) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirV2IDsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


